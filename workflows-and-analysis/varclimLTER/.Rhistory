magnitudes <- rep(1.4, 5)
eventsy <- rep(0, 600)
eventsy[eventsnow] <- magnitudes
eventsy
nowadays <- shabam(8, 600, 0.35, 0)#
nowadays.e <- addevents(nowadays, c(60,120,180,240,300), rep(11,5))
plot(nowadays.e, type="l")
nowadays.e <- addevents(nowadays, c(60,120,180,240,300), rep(2,5))
plot(nowadays.e, type="l")
oldendays <- shabam(6, 600, 0.35, 0)#
plot(oldendays, type="l")
nowadays <- shabam(6, 600, 0.35, 0)#
nowadays.e <- addevents(nowadays, c(130, 220, 330, 450, 560), rep(2,6))
plot(nowadays.e, type="l")
nowadays.e <- addevents(nowadays, c(130, 220, 330, 450, 560),#
    c(3, 3, -2, 2, 3, 3))
plot(nowadays.e, type="l")
nowadays.e <- addevents(nowadays, c(130, 220, 330, 440, 570),#
    c(3, 3, 2.6, 2, 3, -2))
plot(nowadays.e, type="l")
nowadays.e <- addevents(nowadays, c(130, 220, 330, 440, 570),#
    c(2.8, 2.9, 2.6, 2, 3, -2))
plot(nowadays.e, type="l")
oldendays <- shabam(6, 600, 0.35, 0)#
nowadays <- addevents(oldendays, c(20, 130, 220, 330, 440, 570),#
    c(1.6, 2.8, 2.9, 2.6, 2, 3, -2))#
#
plot(oldendays, type="l")#
plot(nowadays, type="l")
futureshop <- shabam(6, 600, 0.35, 3)#
futureshop.e <- addevents(futureshop, c(20, 130, 220, 330, 440, 570),#
    c(1.6, 2.8, 2.9, 2.6, 2, 3.2, -2))#
#
plot(oldendays, type="l")#
plot(nowadays, type="l")#
#
plot(futureshop.e, type="l")
futureshop <- shabam(6, 600, 0.35, 5)#
futureshop.e <- addevents(futureshop, c(20, 130, 220, 330, 440, 570),#
    c(1.6, 2.8, 2.9, 2.6, 2, 3.2, -2))#
#
plot(oldendays, type="l")#
plot(nowadays, type="l")#
#
plot(futureshop.e, type="l")
futureshop <- shabam(6, 600, 0.35, 7)#
futureshop.e <- addevents(futureshop, c(20, 130, 220, 330, 440, 570),#
    c(1.6, 2.8, 2.9, 2.6, 2, 3.2, -2))#
#
plot(oldendays, type="l")#
plot(nowadays, type="l")#
#
plot(futureshop.e, type="l")
oldendays <- shabam(6, 600, 0.35, 0)#
nowadays <- addevents(oldendays, c(20, 130, 220, 330, 440, 570),#
    c(1.6, 2.8, 2.9, 2.6, 2, 3.2, -2))#
futureshop <- shabam(6, 600, 0.35, 7)#
futureshop.e <- addevents(futureshop, c(20, 130, 220, 330, 440, 570),#
    c(1.6, 2.8, 2.9, 2.6, 2, 3.2, -2))#
#
par(ps=9)#
par(mfrow=c(1,3))#
quartz(width=4, height=8)#
plot(oldendays, type="l")#
plot(nowadays, type="l")#
plot(futureshop.e, type="l")
quartz(width=4, height=8)#
par(mfrow=c(1,3))#
plot(oldendays, type="l")#
plot(nowadays, type="l")#
plot(futureshop.e, type="l")
par(ps=9)#
quartz(width=4, height=8)#
par(mfrow=c(3,1))#
plot(oldendays, type="l")#
plot(nowadays, type="l")#
plot(futureshop.e, type="l")
quartz(width=3.5, height=6)#
par(mfrow=c(3,1))#
plot(oldendays, type="l")#
plot(nowadays, type="l")#
plot(futureshop.e, type="l")
quartz(width=3.5, height=6)#
par(mfrow=c(3,1))#
par(oma=c(4,4,2,2)) # set margins #
par(mar=c(1,5,0.5,0)) # set margins#
plot(oldendays, type="l")#
plot(nowadays, type="l")#
plot(futureshop.e, type="l")
quartz(width=3.5, height=6)#
par(mfrow=c(3,1))#
par(oma=c(4,4,2,2)) # set margins #
par(mar=c(2,2,1.5,2)) # set margins#
plot(oldendays, type="l")#
plot(nowadays, type="l")#
plot(futureshop.e, type="l")
quartz(width=3.5, height=6)#
par(mfrow=c(3,1))#
par(oma=c(3,3,2,2)) # set margins #
par(mar=c(2,2,1.5,2)) # set margins#
plot(oldendays, type="l", ylim=c(-1,9))#
plot(nowadays, type="l", ylim=c(-1,9))#
plot(futureshop.e, type="l", ylim=c(-1,9))
par(mfrow=c(3,1))#
par(oma=c(1,3,2,2)) # set margins #
par(mar=c(2,2,1.5,2)) # set margins#
plot(oldendays, type="l", ylim=c(-3,9))#
plot(nowadays, type="l", ylim=c(-3,9))#
plot(futureshop.e, type="l", ylim=c(-3,9))
par(mfrow=c(3,1))#
par(oma=c(1,1,2,2)) # set margins #
par(mar=c(2,2,1.5,2)) # set margins#
plot(oldendays, type="l", ylim=c(-3,9))#
plot(nowadays, type="l", ylim=c(-3,9))#
plot(futureshop.e, type="l", ylim=c(-3,9))
par(mfrow=c(3,1))#
par(oma=c(2,2,2,1)) # set margins #
par(mar=c(2,2,1.5,2)) # set margins#
plot(oldendays, type="l", ylim=c(-3,9))#
plot(nowadays, type="l", ylim=c(-3,9))#
plot(futureshop.e, type="l", ylim=c(-3,9))
par(mfrow=c(3,1))#
par(oma=c(2,2,2,1)) # set margins #
par(mar=c(2,2,1.5,1)) # set margins#
plot(oldendays, type="l", ylim=c(-3,9))#
plot(nowadays, type="l", ylim=c(-3,9))#
plot(futureshop.e, type="l", ylim=c(-3,9))
par(mfrow=c(3,1))#
par(oma=c(2,2,2,0.5)) # set margins #
par(mar=c(2,2,1.5,1)) # set margins#
plot(oldendays, type="l", ylim=c(-3,9))#
plot(nowadays, type="l", ylim=c(-3,9))#
plot(futureshop.e, type="l", ylim=c(-3,9))
par(mfrow=c(3,1))#
par(oma=c(1,2,2,0.5)) # set margins #
par(mar=c(2,2,1.5,1)) # set margins#
plot(oldendays, type="l", ylim=c(-3,9))#
plot(nowadays, type="l", ylim=c(-3,9))#
plot(futureshop.e, type="l", ylim=c(-3,9))
quartz(width=3.5, height=6)#
par(mfrow=c(3,1))#
par(oma=c(2,2,2,1)) # set margins #
par(mar=c(2,2,1,2)) # set margins#
plot(oldendays, type="l", ylim=c(-3,9))#
plot(nowadays, type="l", ylim=c(-3,9))#
plot(futureshop.e, type="l", ylim=c(-3,9))
options(stringsAsFactors=FALSE)#
library(zoo)#
library(strucchange)#
library(bcp)#
#
nyc <- read.csv("~/Documents/git/R/tempeco/input/nycdisease.csv", header=FALSE)#
plot(V1~V2, data=nyc, type="l")#
nyc.ts <- ts(nyc$V2, frequency=12, start=c(1928,1))#
plot(decompose(nyc.ts))#
#
uk <- read.csv("~/Documents/git/R/tempeco/input/english.csv", header=TRUE, colClasses=c(rep("character", 3), rep("numeric", 7)), na.strings="*")#
#
uk$year <- as.character(paste(19, uk$YY, sep=""))#
uk$date <- as.Date(paste(uk$X.DD, uk$MM, uk$year, sep="-"),#
    format="%d-%m-%Y")#
#
plot(London~date, data=uk, type="l")#
#
uk.mon <- aggregate(uk[,4:10], by=uk[c("MM","year")], FUN=mean)#
uk.mon <- subset(uk.mon, is.na(London)==FALSE) # rm one value#
uk.mon$date <- as.Date(paste(15, uk.mon$MM, uk.mon$year, sep="-"),#
    format="%d-%m-%Y")#
#
# to be safe, make timeseries object#
# note, use "coredata" to pull out the data next#
london.zoo <- zoo(uk.mon$London, order.by=uk.mon$date, frequency=12)#
is.regular(london.zoo) # yay#
london.ts <- ts(coredata(london.zoo), frequency=12, start=c(1948,2))#
#
bristol.zoo <- zoo(uk.mon$Bristol, order.by=uk.mon$date, frequency=12)#
bristol.zoo[is.na(bristol.zoo)==TRUE]#
bristol.zoo <-  na.approx(bristol.zoo)#
is.regular(bristol.zoo) # yay#
bristol.ts <- ts(coredata(bristol.zoo), frequency=12, start=c(1948,2))#
#
plot(decompose(london.ts))#
plot(decompose(bristol.ts))#
#
london.tslater <- window(london.ts, start=c(1975, 1), end=c(1987, 12)) #
ukfft <- fft(uk.mon$London, inverse=FALSE)#
spec.pgram(coredata(london.zoo))#
#
lon.fs <- Fstats(london.ts ~ 1)#
dater <- breakdates(breakpoints(lon.fs))#
#
lon.bp <- bcp(coredata(london.zoo))#
#
quartz(height=6, width=5)#
par(mfrow=c(2,1))#
plot(london.zoo)#
# par(new=TRUE)#
# plot(lon.bp$posterior.prob~uk.mon$date, col="firebrick", type="l")#
abline(v=as.Date("1971-04-15", format="%Y-%m-%d"), col="red")#
abline(v=as.Date("1968-06-15", format="%Y-%m-%d"), col="blue")
quartz()
par(mfrow=c(1,1)
)
options(stringsAsFactors=FALSE)#
#
plot(london.zoo)#
# par(new=TRUE)#
# plot(lon.bp$posterior.prob~uk.mon$date, col="firebrick", type="l")#
abline(v=as.Date("1971-04-15", format="%Y-%m-%d"), col="red")#
abline(v=as.Date("1968-06-15", format="%Y-%m-%d"), col="blue")
safety feature(s)#
options(stringsAsFactors=FALSE)#
#
# packages#
library(ggplot2)#
#
#set.seed(2)#
#
## Setting up loop for multiple model runs#
# To do still:#
# (1) add in everything crossyrsvars need (was lazy about this)#
# (2) add in resource stuff to withinyrs#
# (3) decide on list for each run, versus some other format#
#
#Temporarily disabling the multiple runs#
#modelruns <- list() # place to store output of runs#
#nruns <- 2 # number of model runs to do#
#for (j in c(1:nruns)){ # assuming, we will vary species characteristics between yrs ... #
#Stationarity in this run?#
nonsta = 0  #flag for stationary (0) vs nonstationary (=num yrs nonstationary)#
#
#Number of species to start?#
nsp = 2  #when nsp=2, tauI is assigned known values from chesson 2004#
#
source("getRunParms.R") #define runtime parameters#
#
source("getGraphParms.R")  #define graphics parameters#
#
source("getSpecies.R")  #get species characteristics and Rstar#
#
source("getEnvt.R")  #get constant and time-varying envt parms#
#
#Define arrays#
#interannual dynamics set-up (R0 is in getEnvt.R)#
N0 <- rep(100,nsp)          # initial number of seeds (per meter square?)#
N <- matrix(rep(0), nyrs, nsp) # number of seeds by yr and spp#
N[1,] <- N0  #initialize#
rcrt <- matrix(rep(0),nyrs,nsp) # recruitment in year y#
#
## Within-season dynamics set-up#
Bfin <- matrix(rep(0),nyrs,nsp) # biomass at end of year y#
B0  <- matrix(rep(0),nyrs,nsp) # biomass at beginning of year y#
Bout <- list() #each year has a dataframe with time,R(t),Bi(t) of dims(2+nsp,tsteps)#
source("ResCompN.R") # define within-season ode solver#
source("NoCompN.R")  # define within-season ode solver for no competition#
#
## set-up for different coexistence mechanisms#
BnoCout <- list()#
BnoC <- matrix(rep(0),nyrs,nsp) # B without competition at end of year y#
E <- matrix(rep(0),nyrs,nsp)#
C <- matrix(rep(0),nyrs,nsp)#
#
for (y in c(1:(nyrs-1))){#
  g <- gmax*exp(-h*(tauP[y]-tauI)^2)  #germination fraction in year y#
  #get initial biomass for year y#
  B0[y,] <- b*g*N[y,]#
  #use deSolve for ResCompN#
  R<-R0[y]#
  B<-B0[y,]#
  State<-c(R=R,B=B)#
  Time <- seq(0,ndays,by=dt)#
  Bout[[y]] <- as.data.frame(ode(func = ResCompN, y = State, parms = Pars, times = Time))#
  #matplot(Bout[[y]]$time,Bout[[y]][,-1],type="l",ylim=c(0,2.5))#
  #legend("right",names(Bout[[y]])[2:(nsp+2)],lty = 1:5,col=1:6)#
  Bfin[y,] <-  apply(Bout[[y]][3:(2+nsp)],2,FUN=max)  #final biomass#
  #use deSolve for NoCompN to solve for noCompetition condition#
  #would be faster to used solved equation, but calculations were coming out wrong#
  tstar <- (1/eps)*(log(R0[y]) - (1/theta)*log(m/(a*c-a*u*m)))  #
  TimeNC <- seq(0,max(tstar)+5*dt,by=dt)#
  BnoCout[[y]] <- as.data.frame(ode(func = NoCompN, y = State, parms = Pars, times = TimeNC))#
  BnoC[y,] <- apply(BnoCout[[y]][3:(2+nsp)],2,FUN=max)#
  #matplot(BnoCout[[y]]$time,BnoCout[[y]][,-1],type="l")#
  #legend("right",names(BnoCout[[y]])[2:(nsp+2)],lty = 1:5,col=1:6)#
  rcrt[y,] <- s*g*(phi*Bfin[y,]-1)   #to recruit, convert biomass to seeds and overwinter#
  #calculate E and C#
  #tstar is when species cross their Rstar threshold and we stop the season under the no competition condition#
  #tstar is correct: checked against ODE solver, it is when the  biomass starts decreasing#
  #BUT BnoC still doesn't make sense#
  #e1 <- 1+a*u*R0[y]^theta#
  #e2 <- 1+a*u*R0[y]^theta*exp(-eps*tstar*theta)#
  #e3 <- c/(u*eps*theta)#
  #BnoC[y,] <- B0[y,] * e1^(-e3) * e2^(-e3) * exp(-m*tstar)#
  E[y,] <- s*g*(phi*BnoC[y,]-1)      #the -1 accounts for the loss of adults to germination#
  C[y,] <- E[y,]/rcrt[y,]#
#
  N[y+1,] <- N[y,]*(s + rcrt[y,])    #N(t+1) = N(t)* (survival + recruitment)#
  N[y+1,] <- N[y+1,]*(N[y+1,]>ext)  #if density does not exceed ext, set to zero#
}#
##Temporarily disabling multiple runs#
#modelruns[[j]] <- list(crossyrsvars, Bfin, E)#
#
# could also make each run a multi-part dataframe with common names#
# so something like:#
# modelruns[[paste("crossyrs", j, sep="")]] <- crossyrsvars#
# modelruns[[paste("withinyrs", j, sep="")]] <- Bfin#
#
#}#
# between years plot#
dev.new(width=14, height=10)#
plot(Bfin[,1]~c(1:nyrs), ylim=c(min(Bfin), max(Bfin)),#
    xlab="year", ylab="Abundance", type="n")#
for (i in 1:nsp) {#
  lines(Bfin[,i]~c(1:nyrs), col=colerz[i], lty=lspbyrs, lwd=lwd)#
}#
#
dev.new(width=14, height=10)#
#range=c(1:(tsteps/3))#
plot(Bout[[1]]$R~Bout[[1]]$time, ylim=c(0, max(R0)),#
     xlab="step, step, step", ylab="Resource", type="n")#
#hmm, something I did messed up the colors so I had to leave that out#
for (i in 1:(nyrs-1)) {#
  lines(Bout[[i]]$R~Bout[[i]]$time)#, col=colerz[i], lty=lspbyrs, lwd=lwd)#
}#
#
###Megan stopped tweaking plots here, but they will need to be adjusted for new within-year output structure from ode#
#
# within years plots#
# tweaked a little to make biomass differences among years clearer#
dev.new(width=14, height=10)#
par(mfrow=c(3,3))#
par(mar=c(5, 4, 4, 8) + 0.1)#
selectyrs <- seq(1, nyrs, by=floor(nyrs/8))#
yrlength <- ndays/dt#
for (yr in seq_along(selectyrs)){#
    allsp <- B[selectyrs[yr], ,]#
    plot(B[selectyrs[yr], 1,]~c(1:yrlength), ylim=c(min(allsp), max(B)), #
        xlab="step, step, step",  ylab="Abundance", type="n",#
        main=paste("year: ", selectyrs[yr], sep=""))#
    for (sp in c(1:nsp)){#
        lines(B[selectyrs[yr], sp ,]~c(1:yrlength), ylim=c(min(allsp), max(B)),#
            col=colerz[sp])#
    }#
    par(new=TRUE)#
    plot(R[selectyrs[yr],]~c(1:yrlength), axes=FALSE, xlab="", ylab="",#
        ylim=c(min(R[selectyrs[yr],]), max(R[selectyrs[yr],])), type="l",#
        col=rcol, lty=lresbyrs, lwd=lwd)#
    raxis <- seq(0, max(R[selectyrs[yr],]), by=max(R[selectyrs[yr],])/10)#
    axis(4, at=raxis, labels=round(raxis, digits=2))#
    mtext("Resource", side=4, line=3, cex=0.75)#
}#
# two options for overlay histograms#
par(mfrow=c(1,1))#
#
dev.new(width=5, height=6)#
# (1) using the base package (I hate this, let's rm it)#
maxhist <- max(tauI, tauP)*1.1#
tauIfin <- tauI[which(Bfin[max(y),]>0)]#
tauIlosers <- tauI[which(Bfin[max(y),]<=0)]#
hist(tauIfin, col=rgb(1, 0, 0, 0.5), xlim=c(0, maxhist), ylim=c(0, nsp),#
    main=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "), xlab="taus")#
hist(tauP, col=rgb(0, 0, 1, 0.5), add=TRUE)#
hist(tauIlosers, col=rgb(0, 0, 1, 0.5), add=TRUE)#
#
dev.new(width=7, height=6)#
# (2) using ggplot, which really is good for this sort of thing#
tau.df <- data.frame(coexisted=Bfin[max(y),]>0, tauI=tauI)#
tau.df$coexisted[tau.df$coexisted==TRUE] <- "coexisted"#
tau.df$coexisted[tau.df$coexisted==FALSE] <- "doomed"#
tauP.df <- data.frame(coexisted=rep("tauP"), tauP=tauP)#
#
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))
safety feature(s)#
options(stringsAsFactors=FALSE)#
#
# packages#
library(ggplot2)#
library(deSolve)#
#
set.seed(2)#
#
## Setting up loop for multiple model runs#
# To do still:#
# (1) add in everything crossyrsvars need (was lazy about this)#
# (2) add in resource stuff to withinyrs#
# (3) decide on list for each run, versus some other format#
#
#Temporarily disabling the multiple runs#
#modelruns <- list() # place to store output of runs#
#nruns <- 2 # number of model runs to do#
#for (j in c(1:nruns)){ # assuming, we will vary species characteristics between yrs ... #
#Stationarity in this run?#
nonsta = 0  #flag for stationary (0) vs nonstationary (=num yrs nonstationary)#
#
#Number of species to start?#
nsp = 5  #when nsp=2, tauI is assigned known values from chesson 2004#
#
source("getRunParms.R") #define runtime parameters#
#
source("getGraphParms.R")  #define graphics parameters#
#
source("getEnvt.R")  #get constant and time-varying envt parms#
#
source("getSpecies.R")  #get species characteristics and Rstar#
#
#Define arrays#
#interannual dynamics set-up (R0 is in getEnvt.R)#
N0 <- rep(1,nsp)          # initial number of seeds (per meter square?)#
N <- matrix(rep(0), nyrs, nsp) # number of seeds by yr and spp#
N[1,] <- N0  #initialize#
rcrt <- matrix(rep(0),nyrs,nsp) # recruitment in year y#
rcrt0 <- matrix(rep(0),nyrs,nsp) # recruitment WO competition in year y#
#
## Within-season dynamics set-up#
Bfin <- matrix(rep(0),nyrs,nsp) # biomass at end of year y#
B0  <- matrix(rep(0),nyrs,nsp) # biomass at beginning of year y#
Bout <- list() #each year has a dataframe with time,R(t),Bi(t) of dims(2+nsp,tsteps)#
source("ResCompN.R") # define within-season ode solver#
source("NoCompN.R")  # define within-season ode solver for no competition#
#
## set-up for different coexistence mechanisms#
#I have considered 3 defns for E and C, but only one isn't problematic numerically#
  #defn1: E= ln(rcrt0), C=ln(rcrt0/rcrt)  ->compare recruitment w and wo comp#
  #defn2: E= ln(g), C=-ln(phi*Bfin-s) -> this the easiest division of the eqn for rcrt#
  #defn3: E =ln(g), C=-ln(phi*Bfin)  -> in this case, (1-g) is included in the seedback lifespan#
  #defn4: E = ln(g*phi*BnoC), C=ln(BnoC/Bfin)#
BnoCout <- list()#
BnoC <- matrix(rep(0),nyrs,nsp) # B without competition at end of year y#
E <- matrix(rep(0),nyrs,nsp)  #
C <- matrix(rep(0),nyrs,nsp)  #
#
for (y in c(1:(nyrs-1))){#
  #get initial biomass for year y#
  B0[y,] <- b*g[y,]*N[y,] #
  #use deSolve for ResCompN#
  R<-R0[y]#
  B<-B0[y,]#
  State<-c(R=R,B=B)#
  Time <- seq(0,ndays,by=dt)#
  Bout[[y]] <- as.data.frame(ode(func = ResCompN, y = State, parms = Pars, times = Time))#
  #Bout[[y]] <- as.data.frame(lsodar(func = ResCompN, y = State, parms = Pars, times = Time,rootfun=rootfun))#
  Bfin[y,] <-  apply(Bout[[y]][3:(2+nsp)],2,FUN=max)  #final biomass#
  N[y+1,] <- N[y,]*s*(1-g[y,]) + phi*Bfin[y,]    #note Bfin already includes N(t) as init cond#
  N[y+1,] <- N[y+1,]*(N[y+1,]>ext)  #if density does not exceed ext, set to zero#
  #use deSolve for NoCompN to solve for noCompetition condition#
  #would be faster to used solved equation, but calculations were coming out wrong#
  #tstar is when species cross their Rstar threshold and we stop the season under the no competition condition; checked against ODE solver, it is when the  biomass starts decreasing#
  tstar <- (1/eps)*(log(R0[y]) - (1/theta)*log(m/(a*c-a*u*m)))  #
  TimeNC <- seq(0,max(tstar)+5*dt,by=dt)#
  BnoCout[[y]] <- as.data.frame(ode(func = NoCompN, y = State, parms = Pars, times = TimeNC))#
  BnoC[y,] <- apply(BnoCout[[y]][3:(2+nsp)],2,FUN=max)#
  rcrt[y,] <- g[y,]*(phi*Bfin[y,]-s)   #to recruit, convert biomass to seeds and overwinter#
  #rcrt0[y,] <- g[y,]*(phi*BnoC[y,]-s)   #no-competition recruitment#
  #calculate E and C#
  E[y,] <- log(g[y,]*phi*BnoC[y,])         #defn 4#
  C[y,] <- log(BnoC[y,]/Bfin[y,])         #defn 4   #
}#
#modelruns[[j]] <- list(crossyrsvars, Bfin, E)#
#
# could also make each run a multi-part dataframe with common names#
# so something like:#
# modelruns[[paste("crossyrs", j, sep="")]] <- crossyrsvars#
# modelruns[[paste("withinyrs", j, sep="")]] <- Bfin#
#
#}#
#
source("plotNyears.R")  #plots dynamics of seedbank abundance over years#
#
source("plotBinSeason.R")  #plot within season dynamics of biomass & R for a subset of years#
#
source("plotBwCnoC.R")  #plot within season biomass resource dynamics w and wo competition#
###Megan stopped tweaking plots here, but they will need to be adjusted for new within-year output structure from ode#
#
# within years plots#
# tweaked a little to make biomass differences among years clearer#
dev.new(width=14, height=10)#
par(mfrow=c(3,3))#
par(mar=c(5, 4, 4, 8) + 0.1)#
selectyrs <- seq(1, nyrs, by=floor(nyrs/8))#
yrlength <- ndays/dt#
for (yr in seq_along(selectyrs)){#
    allsp <- B[selectyrs[yr], ,]#
    plot(B[selectyrs[yr], 1,]~c(1:yrlength), ylim=c(min(allsp), max(B)), #
        xlab="step, step, step",  ylab="Abundance", type="n",#
        main=paste("year: ", selectyrs[yr], sep=""))#
    for (sp in c(1:nsp)){#
        lines(B[selectyrs[yr], sp ,]~c(1:yrlength), ylim=c(min(allsp), max(B)),#
            col=colerz[sp])#
    }#
    par(new=TRUE)#
    plot(R[selectyrs[yr],]~c(1:yrlength), axes=FALSE, xlab="", ylab="",#
        ylim=c(min(R[selectyrs[yr],]), max(R[selectyrs[yr],])), type="l",#
        col=rcol, lty=lresbyrs, lwd=lwd)#
    raxis <- seq(0, max(R[selectyrs[yr],]), by=max(R[selectyrs[yr],])/10)#
    axis(4, at=raxis, labels=round(raxis, digits=2))#
    mtext("Resource", side=4, line=3, cex=0.75)#
}#
# two options for overlay histograms#
par(mfrow=c(1,1))#
#
dev.new(width=5, height=6)#
# (1) using the base package (I hate this, let's rm it)#
maxhist <- max(tauI, tauP)*1.1#
tauIfin <- tauI[which(Bfin[max(y),]>0)]#
tauIlosers <- tauI[which(Bfin[max(y),]<=0)]#
hist(tauIfin, col=rgb(1, 0, 0, 0.5), xlim=c(0, maxhist), ylim=c(0, nsp),#
    main=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "), xlab="taus")#
hist(tauP, col=rgb(0, 0, 1, 0.5), add=TRUE)#
hist(tauIlosers, col=rgb(0, 0, 1, 0.5), add=TRUE)#
#
dev.new(width=7, height=6)#
# (2) using ggplot, which really is good for this sort of thing#
tau.df <- data.frame(coexisted=Bfin[max(y),]>0, tauI=tauI)#
tau.df$coexisted[tau.df$coexisted==TRUE] <- "coexisted"#
tau.df$coexisted[tau.df$coexisted==FALSE] <- "doomed"#
tauP.df <- data.frame(coexisted=rep("tauP"), tauP=tauP)#
#
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))#
## notes for lizzie (by lizzie):#
# length of vectors is nsp#
# while loop runs through season until minimum R* is met#
# while loop runs until SECOND species is below its R*#
# but we should run it so at R* each species converts to seeds (maybe?)#
# for now we convert max biomass to seeds#
#
# y is years#
# t is within years
gothic <- read.cav("~/Documents/Subversion/phenology/notposting/merge extras/gothicsubplot.csv". header=TRUE)
gothic <- read.cav("~/Documents/Subversion/phenology/notposting/merge extras/gothicsubplot.csv", header=TRUE)
gothic <- read.csv("~/Documents/Subversion/phenology/notposting/merge extras/gothicsubplot.csv", header=TRUE)
head(gothic)
unique(event)
unique(gothic$event)
nyrs <- data.frame(unique(gothic$latbi))#
nyrs$nyrs <- NA
gothic$latbi <- paste(gothic$genus, gothic$species)#
#
# get the numbers of years by species#
nyrs <- data.frame(unique(gothic$latbi))#
nyrs$nyrs <- NA
head(nyrs)
nyrs <- data.frame(unique(gothic$latbi))#
names(nyrs)[1] <- "latbi"
head(nyrs)
gothic <- read.csv("~/Documents/Subversion/phenology/notposting/merge extras/gothicsubplot.csv", header=TRUE)#
#
gothic$latbi <- paste(gothic$genus, gothic$species)#
#
# get the numbers of years by species#
nyrs <- data.frame(unique(gothic$latbi))#
names(nyrs)[1] <- "latbi"#
nyrs$nyrs <- NA#
#
for (i in 1:length(nyrs$latbi){    #
    sppdat <- subset(gothic, latbi==nyrs$latbi[i])#
    nyrs$nyrs[i] <- nrow(sppdat)#
  }
for (i in 1:length(nyrs$latbi)){    #
    sppdat <- subset(gothic, latbi==nyrs$latbi[i])#
    nyrs$nyrs[i] <- nrow(sppdat)#
  }
nyrs
gothic <- read.csv("~/Documents/Subversion/phenology/notposting/merge extras/gothicpeakflowplots.csv", header=TRUE)#
#
gothic$latbi <- paste(gothic$genus, gothic$species)#
#
# get the numbers of years by species#
nyrs <- data.frame(unique(gothic$latbi))#
names(nyrs)[1] <- "latbi"#
nyrs$nyrs <- NA#
#
for (i in 1:length(nyrs$latbi)){    #
    sppdat <- subset(gothic, latbi==nyrs$latbi[i])#
    nyrs$nyrs[i] <- nrow(sppdat)#
  }
nyrs
head(gothic)
ffdfld <- read.csv("~/Documents/Subversion/phenology/Data/pheno_raw.csv", header=TRUE)
gothic <- subset(ffdfld, site=="gothic")
gothic$latbi <- paste(gothic$genus, gothic$species)#
#
# get the numbers of years by species#
nyrs <- data.frame(unique(gothic$latbi))#
names(nyrs)[1] <- "latbi"#
nyrs$nyrs <- NA#
#
for (i in 1:length(nyrs$latbi)){    #
    sppdat <- subset(gothic, latbi==nyrs$latbi[i])#
    nyrs$nyrs[i] <- nrow(sppdat)#
  }
nyrs
head(gothic)
goth <- aggregate(gothic[c("year", "date", "latbi", "event")], gothic["doy"], FUN=min)
goth <- aggregate( gothic["doy"], gothic[c("year", "date", "latbi", "event")],FUN=min)
head(goth)
get the numbers of years by species#
nyrs <- data.frame(unique(goth$latbi))#
names(nyrs)[1] <- "latbi"#
nyrs$nyrs <- NA#
#
for (i in 1:length(nyrs$latbi)){    #
    sppdat <- subset(goth, latbi==nyrs$latbi[i])#
    nyrs$nyrs[i] <- nrow(sppdat)#
  }
nyrs
subset(goth, latbi=="Lathyrus leucanthus")
goth <- aggregate( gothic["doy"], gothic[c("year", "latbi", "event")],FUN=min)#
#
# get the numbers of years by species#
nyrs <- data.frame(unique(goth$latbi))#
names(nyrs)[1] <- "latbi"#
nyrs$nyrs <- NA#
#
for (i in 1:length(nyrs$latbi)){    #
    sppdat <- subset(goth, latbi==nyrs$latbi[i])#
    nyrs$nyrs[i] <- nrow(sppdat)#
  }
nyrs
nyrs <- nyrs[order(c(nys$nyrs)), ]
nyrs <- nyrs[order(c(nyrs$nyrs)), ]
nyrs
gothic <- read.csv("~/Documents/Subversion/phenology/notposting/merge extras/gothicpeakflowplots.csv", header=TRUE)
gothic <- read.csv("~/Documents/Subversion/phenology/notposting/merge extras/gothicpeakflowplots.csv", header=TRUE)#
#
gothic$latbi <- paste(gothic$genus, gothic$species)#
goth <- aggregate( gothic["doy"], gothic[c("year", "latbi", "event")],FUN=min)#
gothicpeak <- subset(gothic, select=c("year", "latbi", "value")#
#
# get the numbers of years by species#
nyrs <- data.frame(unique(goth$latbi))#
names(nyrs)[1] <- "latbi"#
nyrs$nyrs <- NA#
#
for (i in 1:length(nyrs$latbi)){    #
    sppdat <- subset(goth, latbi==nyrs$latbi[i])#
    nyrs$nyrs[i] <- nrow(sppdat)#
  }#
#
nyrs <- nyrs[order(c(nyrs$nyrs)), ]#
nyrs <- merge(nyrs, gothicpeak, by=c("year", "latbi"), all=FALSE)
gothic <- read.csv("~/Documents/Subversion/phenology/notposting/merge extras/gothicpeakflowplots.csv", header=TRUE)#
#
gothic$latbi <- paste(gothic$genus, gothic$species)#
goth <- aggregate( gothic["doy"], gothic[c("year", "latbi", "event")],FUN=min)#
gothicpeak <- subset(gothic, select=c("year", "latbi", "value"))#
#
# get the numbers of years by species#
nyrs <- data.frame(unique(goth$latbi))#
names(nyrs)[1] <- "latbi"#
nyrs$nyrs <- NA#
#
for (i in 1:length(nyrs$latbi)){    #
    sppdat <- subset(goth, latbi==nyrs$latbi[i])#
    nyrs$nyrs[i] <- nrow(sppdat)#
  }#
#
nyrs <- nyrs[order(c(nyrs$nyrs)), ]#
nyrs <- merge(nyrs, gothicpeak, by=c("year", "latbi"), all=FALSE)#
#
# looked at GothicInouye_phenspecies.csv to check these were all 'real' species
head(gothicpeak)
head(gothicpeak)nyrs <- nyrs[order(c(nyrs$nyrs)), ]
nyrs <- nyrs[order(c(nyrs$nyrs)), ]
nyrs
gothic <- read.csv("~/Documents/Subversion/phenology/notposting/merge extras/gothicpeakflowplots.csv", header=TRUE)#
#
gothic$latbi <- paste(gothic$genus, gothic$species)#
goth <- aggregate( gothic["doy"], gothic[c("year", "latbi", "event")],FUN=min)#
gothicpeak <- subset(gothic, select=c("year", "latbi", "value"))#
#
gothicuse <- merge(gothicpeak, gothic, by=c("year", "latbi", "value")#
    all=FALSE)
gothicuse <- merge(gothicpeak, gothic, by=c("year", "latbi", "value"),#
    all=FALSE)
head(gothicuse)
plot(value~year, data=subset(gothicuse, latbi=="Delphinium nuttallianum")
)
plot(value~year, data=subset(gothicuse, latbi=="Delphinium nuttallianum"),#
    type="l")
lines(value~year, data=subset(gothicuse, latbi=="Ipomopsis aggregata"), col="blue")
lines(value~year, data=subset(gothicuse, latbi=="Osmorhiza occidentalis"), col="blue")
plot(value~year, data=subset(gothicuse, latbi=="Delphinium nuttallianum"),#
    type="l")#
lines(value~year, data=subset(gothicuse, latbi=="Ipomopsis aggregata"), col="blue")#
lines(value~year, data=subset(gothicuse, latbi=="Osmorhiza occidentalis"), col="red")
nyrs
lines(value~year, data=subset(gothicuse, latbi=="Polygonum douglasii"), col="blue")
plot(value~year, data=subset(gothicuse, latbi=="Delphinium nuttallianum"),#
    type="l")#
lines(value~year, data=subset(gothicuse, latbi=="Polygonum douglasii"), col="blue")#
lines(value~year, data=subset(gothicuse, latbi=="Oxypolis fendleri"), col="red")
plot(value~year, data=subset(gothicuse, latbi=="Delphinium nuttallianum"),#
    type="l")#
lines(value~year, data=subset(gothicuse, latbi=="Polygonum douglasii"), col="blue")#
lines(value~year, data=subset(gothicuse, latbi=="Paxistima myrsinites"), col="red")
nyrs <- data.frame(unique(goth$latbi))#
names(nyrs)[1] <- "latbi"#
nyrs$nyrs <- NA#
nyrs$max <- NA#
for (i in 1:length(nyrs$latbi)){    #
    sppdat <- subset(goth, latbi==nyrs$latbi[i])#
    nyrs$nyrs[i] <- nrow(sppdat)#
    nyrs$max[i] <- max(sppdat$value)#
  }
nyrs
gothic <- read.csv("~/Documents/Subversion/phenology/notposting/merge extras/gothicpeakflowplots.csv", header=TRUE)#
#
gothic$latbi <- paste(gothic$genus, gothic$species)#
goth <- aggregate( gothic["doy"], gothic[c("year", "latbi", "event")],FUN=min)#
gothicpeak <- subset(gothic, select=c("year", "latbi", "value"))#
#
gothicuse <- merge(gothicpeak, gothic, by=c("year", "latbi", "value"),#
    all=FALSE)#
#
# get the numbers of years by species#
nyrs <- data.frame(unique(gothicuse$latbi))#
names(nyrs)[1] <- "latbi"#
nyrs$nyrs <- NA#
nyrs$max <- NA#
for (i in 1:length(nyrs$latbi)){    #
    sppdat <- subset(gothicuse, latbi==nyrs$latbi[i])#
    nyrs$nyrs[i] <- nrow(sppdat)#
    nyrs$max[i] <- max(sppdat$value)#
  }
nyrs
gothicuse <- subset(gothicuse, year>1980)#
gothicuse$valuescaled <- NA#
gothicuse$valuescaled[latbi=="Delphinium nuttallianum"]
gothicuse[latbi=="Delphinium nuttallianum"]
gothicuse$valuescaled[gothicuse$latbi=="Delphinium nuttallianum"] <- 2
nyrs$value(nyrs$latbi=="Delphinium nuttallianum")
nyrs$value[nyrs$latbi=="Delphinium nuttallianum"]
subset(nyrs, latbi=="Delphinium nuttallianum")
gothicuse$valuescaled[gothicuse$latbi=="Delphinium nuttallianum"] <- gothicuse$value/524
[gothicuse$latbi=="Delphinium nuttallianum"]
gothicuse$valuescaled[gothicuse$latbi=="Delphinium nuttallianum"]
gothicuse$valuescaled <- NA#
gothicuse$valuescaled[gothicuse$latbi=="Delphinium nuttallianum"] <- gothicuse$value/524
subset(nyrs, latbi=="Polygonum douglasii")#
subset(nyrs, latbi=="Paxistima myrsinites")
plot(value~year, data=subset(gothicuse, latbi=="Delphinium nuttallianum"),#
    color="pink", type="l")#
lines(value~year, data=subset(gothicuse, latbi=="Polygonum douglasii"),#
    col="dodgerblue")#
lines(value~year, data=subset(gothicuse, latbi=="Paxistima myrsinites"),#
    col="firebrick")
plot(value~year, data=subset(gothicuse, latbi=="Delphinium nuttallianum"),#
    col="darkslateblue", type="l")#
lines(value~year, data=subset(gothicuse, latbi=="Polygonum douglasii"),#
    col="deepskyblue1")#
lines(value~year, data=subset(gothicuse, latbi=="Paxistima myrsinites"),#
    col="firebrick")
plot(valuescaled~year, data=subset(gothicuse,#
    latbi=="Delphinium nuttallianum"), col="darkslateblue", type="l")#
lines(valuescaled~year, data=subset(gothicuse,#
    latbi=="Polygonum douglasii"), col="deepskyblue1")#
lines(valuescaled~year, data=subset(gothicuse,#
    latbi=="Paxistima myrsinites"), col="firebrick")
data=subset(gothicuse,#
    latbi=="Paxistima myrsinites")
data
gothicuse <- subset(gothicuse, year>1980)#
gothicuse$valuescaled <- NA#
gothicuse$valuescaled[gothicuse$latbi=="Delphinium nuttallianum"] <- gothicuse$value/524#
gothicuse$valuescaled[gothicuse$latbi=="Polygonum douglasii"] <- gothicuse$value/65#
gothicuse$valuescaled[gothicuse$latbi=="Paxistima myrsinites"] <- gothicuse$value/257
subset(gothicuse,#
    latbi=="Paxistima myrsinites")
plot(valuescaled~year, data=subset(gothicuse,#
    latbi=="Delphinium nuttallianum"), col="darkslateblue", type="l")#
lines(valuescaled~year, data=subset(gothicuse,#
    latbi=="Polygonum douglasii"), col="deepskyblue1")#
lines(valuescaled~year, data=subset(gothicuse,#
    latbi=="Paxistima myrsinites"), col="firebrick")
plot(value~year, data=subset(gothicuse, latbi=="Delphinium nuttallianum"),#
    col="deepskyblue1", type="l")#
lines(value~year, data=subset(gothicuse, latbi=="Polygonum douglasii"),#
    col="darkseagreen4")#
lines(value~year, data=subset(gothicuse, latbi=="Paxistima myrsinites"),#
    col="firebrick")
plot(value~year, data=subset(gothicuse, latbi=="Delphinium nuttallianum"),#
    col="skyblue2", type="l")#
lines(value~year, data=subset(gothicuse, latbi=="Polygonum douglasii"),#
    col="thistle4")#
lines(value~year, data=subset(gothicuse, latbi=="Paxistima myrsinites"),#
    col="firebrick")
plot(value~year, data=subset(gothicuse, latbi=="Delphinium nuttallianum"),#
    col="cadetblue2", type="l")#
lines(value~year, data=subset(gothicuse, latbi=="Polygonum douglasii"),#
    col="thistle3")#
lines(value~year, data=subset(gothicuse, latbi=="Paxistima myrsinites"),#
    col="firebrick")
plot(value~year, data=subset(gothicuse, latbi=="Delphinium nuttallianum"),#
    col="dodgerblue3", type="l")#
lines(value~year, data=subset(gothicuse, latbi=="Polygonum douglasii"),#
    col="thistle3")#
lines(value~year, data=subset(gothicuse, latbi=="Paxistima myrsinites"),#
    col="firebrick")
plot(valuescaled~year, data=subset(gothicuse,#
    latbi=="Delphinium nuttallianum"), col="darkslateblue", type="l")#
points(valuescaled~year, data=subset(gothicuse,#
    latbi=="Polygonum douglasii"), col="deepskyblue1", pch=16)#
lines(valuescaled~year, data=subset(gothicuse,#
    latbi=="Polygonum douglasii"), col="deepskyblue1")#
lines(valuescaled~year, data=subset(gothicuse,#
    latbi=="Paxistima myrsinites"), col="firebrick")
plot(value~year, data=subset(gothicuse, latbi=="Delphinium nuttallianum"),#
    col="dodgerblue3", type="l")#
points(value~year, data=subset(gothicuse,#
     latbi=="Delphinium nuttallianum"), col="dodgerblue3", pch=16)#
points(valuescaled~year, data=subset(gothicuse,#
    latbi=="Polygonum douglasii"), col="deepskyblue1", pch=16)#
lines(value~year, data=subset(gothicuse, latbi=="Polygonum douglasii"),#
    col="thistle3")#
points(valuescaled~year, data=subset(gothicuse, #
    latbi=="Paxistima myrsinites"), col="firebrick", pch=16)#
lines(value~year, data=subset(gothicuse, latbi=="Paxistima myrsinites"),#
    col="firebrick")
plot(value~year, data=subset(gothicuse, latbi=="Delphinium nuttallianum"),#
    col="dodgerblue3", type="l")#
points(value~year, data=subset(gothicuse,#
     latbi=="Delphinium nuttallianum"), col="dodgerblue3", pch=16)#
#
points(valuescaled~year, data=subset(gothicuse,#
    latbi=="Polygonum douglasii"), col="thistle3", pch=16)#
lines(value~year, data=subset(gothicuse, latbi=="Polygonum douglasii"),#
    col="thistle3")#
points(valuescaled~year, data=subset(gothicuse, #
    latbi=="Paxistima myrsinites"), col="firebrick", pch=16, cex=0.5)#
lines(value~year, data=subset(gothicuse, latbi=="Paxistima myrsinites"),#
    col="firebrick")
plot(value~year, data=subset(gothicuse, latbi=="Delphinium nuttallianum"),#
    col="dodgerblue3", type="l")#
points(value~year, data=subset(gothicuse,#
     latbi=="Delphinium nuttallianum"), col="dodgerblue3", pch=16, cex=0.5)#
#
points(value~year, data=subset(gothicuse,#
    latbi=="Polygonum douglasii"), col="thistle3", pch=16, cex=0.5)#
lines(value~year, data=subset(gothicuse, latbi=="Polygonum douglasii"),#
    col="thistle3")#
#
points(value~year, data=subset(gothicuse, #
    latbi=="Paxistima myrsinites"), col="firebrick", pch=16, cex=0.5)#
lines(value~year, data=subset(gothicuse, latbi=="Paxistima myrsinites"),#
    col="firebrick")
plot(value~year, data=subset(gothicuse, latbi=="Delphinium nuttallianum"),#
    col="dodgerblue3", type="l")#
# points(value~year, data=subset(gothicuse,#
#     latbi=="Delphinium nuttallianum"), col="dodgerblue3", pch=16, cex=0.5)#
# points(value~year, data=subset(gothicuse,#
#     latbi=="Polygonum douglasii"), col="thistle3", pch=16, cex=0.5)#
lines(value~year, data=subset(gothicuse, latbi=="Polygonum douglasii"),#
    col="thistle3")#
# points(value~year, data=subset(gothicuse, #
#    latbi=="Paxistima myrsinites"), col="firebrick", pch=16, cex=0.5)#
lines(value~year, data=subset(gothicuse, latbi=="Paxistima myrsinites"),#
    col="firebrick")
Started 10 July 2011 ####
### By Lizzie & Megan ####
#
## VarEnvironments & Coexistence ###
#
# safety feature(s)#
options(stringsAsFactors=FALSE)#
#
# packages#
library(ggplot2)#
#
#set.seed(2)#
#
# define all parameters#
nsp <- 20    # number of spp#
nyrs1 <- 100  # number of yrs to run first stationary period#
ndays <- 1  # number of days in a growing season#
dt <- 0.0005 # within yr timestep for competing species#
tsteps <- ndays/dt#
# params for adding on a nonstationary run after stationary run#
nyrs2 <- 50 # number of yrs for second run (nonstationary for now)#
nyrs <- nyrs1+nyrs2 # ALERT! change below once not doing stationary+nonstationary run#
y <- c(1:nyrs)#
#
## Extinction Threshold:  .01 seed per hectare (assuming that initial density is 10 seeds per meter)#
ext <- 1e-6#
#
# set up graphics parameters#
colerz <- topo.colors(nsp)#
rcol <- "darkslateblue"#
linez <- rep(1:6, 100) # enough for 600 species for now#
lspbyrs <- 1#
lresbyrs <- 2#
lwd=2#
#
## Setting up loop for multiple model runs#
# To do still:#
# (1) add in everything crossyrsvars need (was lazy about this)#
# (2) add in resource stuff to withinyrs#
# (3) decide on list for each run, versus some other format#
#
# modelruns <- list() # place to store output of runs#
# nruns <- 2 # number of model runs to do#
# for (j in c(1:nruns)){ # assuming, we will vary species characteristics between yrs ... #
#
###
## species characteristics#
###
b <-  rep(1,nsp)          # biomass of seedling#
s <-  rep(0.8,nsp)      # seedbank survival overwinter#
a <-  rep(20,nsp)        # slope of species uptake rate with increasing R#
u <-  rep(1,nsp)          # inverse of the max uptake rate#
c <-  rep(12,nsp)        # conversion of resource to biomass#
m <-  rep(0.05,nsp)     # mortality#
gmax <-  rep(0.5,nsp)     # max germination fraction#
h <-  rep(100,nsp)             # max rate of germination decrease following pulse#
phi <- rep(0.05,nsp)     # conversion of end-of-season plant biomass to seeds#
tauI <- runif(nsp,0.1, 0.9)    # time of max germ for sp i#
# set up tracking (to do for Lizzie, there should be code under here someday)#
theta <- rep(1,nsp)         # shape of species i uptake curve, remember it should be an integer!#
N0 <- rep(10,nsp)          # initial number of seeds (per meter square?)#
Rstar <- (m/(a*(c-m*u)))^(1/theta)#
#
crossyrsvars <- as.data.frame(cbind(b, s, a, u, c, m, gmax, h, phi, theta, tauI, Rstar))#
#
###
## time-varying env variables#
###
mu <- log(2)  #mean of resource distribution#
sigma <- 0.2  #sd of resource distribution#
R0 <- rlnorm(nyrs, mu, sigma) # intial R in a season#
eps <- 1              # evaporative stress#
#tauP <- 0.3           # timing of pulse#
p <- 2  #first parameter for beta distribution of tau#
q <- 2  #second parameter for beta distribution of tau#
tauPs <- rbeta(nyrs1, p, q) # change once not doing stationary+nonstationary run#
#
# nonstationary tauP, change once not doing stationary+nonstationary run#
qns <- seq(2, 20, length.out=nyrs2)#
tauPns <- rbeta(nyrs2, p, qns) # yes, it takes a vector! Yay!#
plot(tauPns~c(1:50))#
tauP <- c(tauPs, tauPns)#
#
###
## Within-growing season dynamics set-up#
###
R <- matrix(rep(0), nyrs, ndays/dt) # R is the resource level through the growing season (each yr)#
B <- array(rep(0), dim=c(nyrs,nsp,tsteps)) # where B is an array with yr (nyrs), spp biomass#
# through growing season (ndays)#
N <- matrix(rep(0), nyrs, nsp) # number of seeds by yr and spp#
N[1,] <- N0  #initialize#
Bfin <- matrix(rep(0),nyrs,nsp) # biomass at end of year y#
#
###
## set-up for different coexistence mechanisms#
###
tauIstar <- matrix(rep(0),nyrs,nsp)#
RnoC <- array(rep(0), dim=c(nyrs,nsp,tsteps)) # R in noComp sim, must have different R for each sp#
BnoC <- array(rep(0), dim=c(nyrs,nsp,tsteps)) # B in noComp sim#
BnoCfin <- matrix(rep(0),nyrs,nsp) # biomass at end of year y#
E <- matrix(rep(0),nyrs,nsp)#
C <- matrix(rep(0),nyrs,nsp)#
#
###
## change to mapply someday?#
## for now, a loop#
## Better to use ODE solver within each year?#
###
#
for (y in c(1:(nyrs-1))){#
  g <- gmax*exp(-h*(tauP[y]-tauI)^2)  #germination fraction in year y#
  g <- g*(g>ext)#
  R[y,1] <- R0[y]#
  B[y,,1] <- b*g*N[y,]#
  k<-1#
  while (R[y,k]>min(Rstar)){#
    #with competition from the whole community#
    f <- (a*R[y,k]^theta)/(1+a*u*R[y,k]^theta)#
    B[y,,k+1] <- B[y,,k] + (c*f-m) * B[y,,k] * dt#
    R[y,k+1] <- R[y, k] -dt*(t(B[y,,k]) %*% f + eps*R[y,k])#
    R[y,k+1] <- R[y,k+1]*(R[y,k+1]>0)#
    k <- k+1#
  }#
  Bfin[y,] <- apply(B[y,,], 1, max)  #final biomass#
  #rcrt[y,] <- s*(N[y,]*(1-g)+phi*Bfin[y,])#
  N[y+1,] <- s*(N[y,]*(1-g))+phi*Bfin[y,]  #convert biomass to seeds and overwinter#
  N[y+1,] <- N[y+1,]*(N[y+1,]>ext)  #if density does not exceed ext, set to zero#
  #without competition from other species  (need a separate loop bc of end condition)  #
  for (s in c(1:nsp)){#
    j<-1#
    RnoC[y,s,j] <- R0[y]#
    BnoC[y,s,j] <- b[s]*g[s]*N[y,s]#
    if (BnoC[y,s,j] > 0) {  #don't go through the loop if species s didn't  germinate this year#
      while (RnoC[y,s,j]>Rstar[s]) {  #run until species s crosses its the Rstar threshold#
        f <- (a[s]*RnoC[y,s,j]^theta[s])/(1+a[s]*u[s]*RnoC[y,s,j]^theta[s])#
        BnoC[y,s,j+1] <- BnoC[y,s,j] + dt * (c[s]*f-m[s]) * BnoC[y,s,j]#
        RnoC[y,s,j+1] <- RnoC[y,s,j] - dt * (BnoC[y,s,j]*f + eps*RnoC[y,s,j])#
        RnoC[y,s,j+1] <- RnoC[y,s,j+1]*(RnoC[y,s,j+1]>0)    #
        j <- j+1#
      }#
    }#
    BnoCfin[y,s] <- max(BnoC[y,s,])  #final biomass#
  }#
#
  #Calculate E and C#
}#
#   modelruns[[j]] <- list(crossyrsvars, Bfin, E)#
#   # could also make each run a multi-part dataframe with common names#
#   # so something like:#
#   # modelruns[[paste("crossyrs", j, sep="")]] <- crossyrsvars#
#   # modelruns[[paste("withinyrs", j, sep="")]] <- Bfin#
# }#
# between years plot#
dev.new(width=14, height=10)#
plot(Bfin[,1]~c(1:nyrs), ylim=c(min(Bfin), max(Bfin)),#
     xlab="year", ylab="Abundance", type="n")#
for (i in 1:nsp) {#
  lines(Bfin[,i]~c(1:nyrs), col=colerz[i], lty=lspbyrs, lwd=lwd)#
}#
#
dev.new(width=14, height=10)#
range=c(1:(tsteps/3))#
plot(R[1,range]~range, ylim=c(min(R), max(R)),#
     xlab="step, step, step", ylab="Resource", type="n")#
for (i in 2:nyrs) {#
  lines(R[i,range]~range, col=colerz[i], lty=lspbyrs, lwd=lwd)#
}#
# within years plots#
# tweaked a little to make biomass differences among years clearer#
dev.new(width=14, height=10)#
par(mfrow=c(3,3))#
par(mar=c(5, 4, 4, 8) + 0.1)#
selectyrs <- seq(1, nyrs, by=floor(nyrs/8))#
yrlength <- ndays/dt#
for (yr in seq_along(selectyrs)){#
  allsp <- B[selectyrs[yr], ,]#
  plot(B[selectyrs[yr], 1,]~c(1:yrlength), ylim=c(min(allsp), max(B)), #
       xlab="step, step, step",  ylab="Abundance", type="n",#
       main=paste("year: ", selectyrs[yr], sep=""))#
  for (sp in c(1:nsp)){#
    lines(B[selectyrs[yr], sp ,]~c(1:yrlength), ylim=c(min(allsp), max(B)),#
          col=colerz[sp])#
  }#
  par(new=TRUE)#
  plot(R[selectyrs[yr],]~c(1:yrlength), axes=FALSE, xlab="", ylab="",#
       ylim=c(min(R[selectyrs[yr],]), max(R[selectyrs[yr],])), type="l",#
       col=rcol, lty=lresbyrs, lwd=lwd)#
  raxis <- seq(0, max(R[selectyrs[yr],]), by=max(R[selectyrs[yr],])/10)#
  axis(4, at=raxis, labels=round(raxis, digits=2))#
  mtext("Resource", side=4, line=3, cex=0.75)#
}#
# two options for overlay histograms#
par(mfrow=c(1,1))#
#
dev.new(width=5, height=6)#
# (1) using the base package (I hate this, let's rm it)#
maxhist <- max(tauI, tauP)*1.1#
tauIfin <- tauI[which(Bfin[max(y),]>0)]#
tauIlosers <- tauI[which(Bfin[max(y),]<=0)]#
hist(tauIfin, col=rgb(1, 0, 0, 0.5), xlim=c(0, maxhist), ylim=c(0, nsp),#
     main=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "), xlab="taus")#
hist(tauP, col=rgb(0, 0, 1, 0.5), add=TRUE)#
hist(tauIlosers, col=rgb(0, 0, 1, 0.5), add=TRUE)#
#
dev.new(width=7, height=6)#
# (2) using ggplot, which really is good for this sort of thing#
tau.df <- data.frame(coexisted=Bfin[max(y),]>0, tauI=tauI)#
tau.df$coexisted[tau.df$coexisted==TRUE] <- "coexisted"#
tau.df$coexisted[tau.df$coexisted==FALSE] <- "doomed"#
tauP.df <- data.frame(coexisted=rep("tauP"), tauP=tauP)#
#
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
  geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
  geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
  labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))#
## notes for lizzie (by lizzie):#
# length of vectors is nsp#
# while loop runs through season until minimum R* is met#
# while loop runs until SECOND species is below its R*#
# but we should run it so at R* each species converts to seeds (maybe?)#
# for now we convert max biomass to seeds#
#
# y is years#
# t is within years#
#
# %% is mod (integer division: it's the remainder once a even division)#
#
print(c("The number of coexisting species are",sum(Bfin[max(y),]>0),"out of",nsp))
B <- array(rep(0), dim=c(nyrs,nsp,tsteps))
B <- array(rep(0), dim=c(nyrs,nsp,))
B <- array(rep(0), dim=c(nyrs,nsp,NA))
B <- array(rep(0), dim=c(nyrs,nsp,1))
B[1,1,2]<-2
B[1,1,]<-B[1,1, c(1,2)]
B <- c(B, (1,1,2))
B[1,1,] <- rbind(B[1,1,1], 2)
B<- rbind(B[1,1,1], 2)
B
B <- array(rep(0), dim=c(nyrs,nsp,1))
B
B <- array(rep(0), dim=c(10,nsp,1))
B
B <- array(rep(0), dim=c(10,nsp,3))
B
B <- array(rep(0), dim=c(4,nsp,3))
B
Badd <- array(rep(0), dim=c(4,nsp))
Badd
B <- rbind(B, Badd)
B <- rbind(B, Badd)B
B
Badd <- array(rep(0), dim=c(4,nsp))
B <- array(rep(0), dim=c(4,nsp,3))
B <- array(rep(0), dim=c(2,6,3))
B
Badd <- array(rep(0), dim=c(2, 6, 1))
Badd
Bnew <- cbind(B, Badd)
Bnew
Bnew <- c(B, Badd)
Badd
B
Bnew <- c(B, Badd)
Bnew
Bnew <- rbind(B, Badd)
Bnew
Bnew <- mbind(B, Badd)
Z.mat <- matrix(c(2,2,2,1,1,1,3,2,1,6,5,4,9,1,1,2,3,2), nrow=6)
Z.mat <- cbind(Z.mat, c(6,9,8,15,16,17))
Z.mat <- matrix(c(2,2,2,1,1,1,3,2,1,6,5,4,9,1,1,2,3,2), nrow=6)
Z.mat
Z.mat <- cbind(Z.mat, c(6,9,8,15,16,17))
Z.mat
B
Bnew <- cbind(B, array(rep(0), dim=c(2, 6, 1)))
Bnew
B
Bnew <- abind(B, array(rep(0), dim=c(2, 6, 1)))
library(abind)
Bnew <- abind(B, array(rep(0), dim=c(2, 6, 1)))
Bnew
Badd <- array(rep(0), dim=c(2, 6, 1))
B <- array(rep(0), dim=c(2,6,3))
B <- array(rep(0), dim=c(2,6,3))#
Badd <- array(rep(0), dim=c(2, 6, 1))#
#
Bnew <- abind(B, array(rep(0), dim=c(2, 6, 1)))
B
Badd
Bnew
Bnew <- abind(B, Badd)
Bnew
Started 10 July 2011 ####
### By Lizzie & Megan ####
#
## VarEnvironments & Coexistence ###
#
# safety feature(s)#
options(stringsAsFactors=FALSE)#
#
# packages#
library(ggplot2)#
library(abind)#
#
#set.seed(2)#
#
# define all parameters#
nsp <- 20    # number of spp#
nyrs1 <- 50  # number of yrs to run first stationary period#
ndays <- 1  # number of days in a growing season#
dt <- 0.0005 # within yr timestep for competing species#
tsteps <- ndays/dt#
# params for adding on a nonstationary run after stationary run#
nyrs2 <- 0 # number of yrs for second run (nonstationary for now)#
nyrs <- nyrs1+nyrs2 # ALERT! change below once not doing stationary+nonstationary run#
y <- c(1:nyrs)#
#
## Extinction Threshold:  .01 seed per hectare (assuming that initial density is 10 seeds per meter)#
ext <- 1e-6#
#
# set up graphics parameters#
colerz <- topo.colors(nsp)#
rcol <- "darkslateblue"#
linez <- rep(1:6, 100) # enough for 600 species for now#
lspbyrs <- 1#
lresbyrs <- 2#
lwd=2#
#
## Setting up loop for multiple model runs#
# To do still:#
# (1) add in everything crossyrsvars need (was lazy about this)#
# (2) add in resource stuff to withinyrs#
# (3) decide on list for each run, versus some other format#
#
# modelruns <- list() # place to store output of runs#
# nruns <- 2 # number of model runs to do#
# for (j in c(1:nruns)){ # assuming, we will vary species characteristics between yrs ... #
#
###
## species characteristics#
###
b <-  rep(1,nsp)          # biomass of seedling#
s <-  rep(0.8,nsp)      # seedbank survival overwinter#
a <-  rep(20,nsp)        # slope of species uptake rate with increasing R#
u <-  rep(1,nsp)          # inverse of the max uptake rate#
c <-  rep(12,nsp)        # conversion of resource to biomass#
m <-  rep(0.05,nsp)     # mortality#
gmax <-  rep(0.5,nsp)     # max germination fraction#
h <-  rep(100,nsp)             # max rate of germination decrease following pulse#
phi <- rep(0.05,nsp)     # conversion of end-of-season plant biomass to seeds#
tauI <- runif(nsp,0.1, 0.9)    # time of max germ for sp i#
# set up tracking (to do for Lizzie, there should be code under here someday)#
theta <- rep(1,nsp)         # shape of species i uptake curve, remember it should be an integer!#
N0 <- rep(10,nsp)          # initial number of seeds (per meter square?)#
Rstar <- (m/(a*(c-m*u)))^(1/theta)#
#
crossyrsvars <- as.data.frame(cbind(b, s, a, u, c, m, gmax, h, phi, theta, tauI, Rstar))#
#
###
## time-varying env variables#
###
mu <- log(2)  #mean of resource distribution#
sigma <- 0.2  #sd of resource distribution#
R0 <- rlnorm(nyrs, mu, sigma) # intial R in a season#
eps <- 1              # evaporative stress#
#tauP <- 0.3           # timing of pulse#
p <- 2  #first parameter for beta distribution of tau#
q <- 2  #second parameter for beta distribution of tau#
tauPs <- rbeta(nyrs1, p, q) # change once not doing stationary+nonstationary run#
#
# nonstationary tauP, change once not doing stationary+nonstationary run#
qns <- seq(2, 20, length.out=nyrs2)#
tauPns <- rbeta(nyrs2, p, qns) # yes, it takes a vector! Yay!#
plot(tauPns~c(1:50))#
tauP <- c(tauPs, tauPns)#
#
###
## Within-growing season dynamics set-up#
###
R <- list(NULL)#matrix(rep(0), nyrs, ndays/dt) # R is the resource level through the growing season (each yr)#
Bt<-matrix(rep(0), nrow=nsp,ncol=1) #within season holder- temporary#
B <- list(NULL)#array(rep(0), dim=c(nyrs,nsp,tsteps)) # where B is an array with yr (nyrs), spp biomass#
# through growing season (ndays)#
N <- matrix(rep(0), nyrs, nsp) # number of seeds by yr and spp#
N[1,] <- N0  #initialize#
Bfin <- matrix(rep(0),nyrs,nsp) # biomass at end of year y#
#
###
## set-up for different coexistence mechanisms#
###
tauIstar <- matrix(rep(0),nyrs,nsp)#
RnoC <- list(NULL)  # R in noComp sim, will be a list with each year containing a list for each sp#
#RnoCt <- list(NULL)  #temp list containing a R in noComp sim, must have different R for each sp#
BnoC <- list(NULL)#array(rep(0), dim=c(nyrs,nsp,tsteps)) # B in noComp sim#
BnoCfin <- matrix(rep(0),nyrs,nsp) # biomass at end of year y#
E <- matrix(rep(0),nyrs,nsp)#
C <- matrix(rep(0),nyrs,nsp)#
#
###
## change to mapply someday?#
## for now, a loop#
## Better to use ODE solver within each year?#
###
#
for (y in c(1:(nyrs-1))){#
  g <- gmax*exp(-h*(tauP[y]-tauI)^2)  #germination fraction in year y#
  g <- g*(g>ext)#
  Rt <- R0[y]#
  k<-1#
  Bt<-matrix(rep(0), nrow=nsp,ncol=1)#
  Bt[,k] <- b*g*N[y,]#
  while (Rt[k]>min(Rstar)){#
    #with competition from the whole community#
    f <- (a*Rt[k]^theta)/(1+a*u*Rt[k]^theta)#
    Bt <- abind(Bt,Bt[,k] + dt*(c*f-m)*Bt[,k])#
    Rt[k+1] <- Rt[k] -dt*(t(Bt[,k]) %*% f + eps*Rt[k])#
    Rt[k+1] <- Rt[k+1]*(Rt[k+1]>0)#
    k <- k+1#
  }#
  Bfin[y,] <- apply(Bt[,], 1, max)  #final biomass#
  for (i in c(1:nsp)){B[[paste(y)]][[paste("B",i,sep="")]]<-Bt[i,]}#
  R[[y]]<-Rt#
  #rcrt[y,] <- s*(N[y,]*(1-g)+phi*Bfin[y,])#
  N[y+1,] <- s*(N[y,]*(1-g))+phi*Bfin[y,]  #convert biomass to seeds and overwinter#
  N[y+1,] <- N[y+1,]*(N[y+1,]>ext)  #if density does not exceed ext, set to zero#
#   #without competition from other species  (need a separate loop bc of end condition)  #
#   for (s in c(1:nsp)){#
#     j<-1#
#     RnoC[y,s,j] <- R0[y]#
#     BnoC[y,s,j] <- b[s]*g[s]*N[y,s]#
#     if (BnoC[y,s,j] > 0) {  #don't go through the loop if species s didn't  germinate this year#
#       while (RnoC[y,s,j]>Rstar[s]) {  #run until species s crosses its the Rstar threshold#
#         f <- (a[s]*RnoC[y,s,j]^theta[s])/(1+a[s]*u[s]*RnoC[y,s,j]^theta[s])#
#         BnoC[y,s,j+1] <- BnoC[y,s,j] + dt * (c[s]*f-m[s]) * BnoC[y,s,j]#
#         RnoC[y,s,j+1] <- RnoC[y,s,j] - dt * (BnoC[y,s,j]*f + eps*RnoC[y,s,j])#
#         RnoC[y,s,j+1] <- RnoC[y,s,j+1]*(RnoC[y,s,j+1]>0)    #
#         j <- j+1#
#       }#
#     }#
#     BnoCfin[y,s] <- max(BnoC[y,s,])  #final biomass#
#  }#
#
  #Calculate E and C#
#
}#
#   modelruns[[j]] <- list(crossyrsvars, Bfin, E)#
#   # could also make each run a multi-part dataframe with common names#
#   # so something like:#
#   # modelruns[[paste("crossyrs", j, sep="")]] <- crossyrsvars#
#   # modelruns[[paste("withinyrs", j, sep="")]] <- Bfin#
# }#
# between years plot#
dev.new(width=14, height=10)#
plot(Bfin[,1]~c(1:nyrs), ylim=c(min(Bfin), max(Bfin)),#
     xlab="year", ylab="Abundance", type="n")#
for (i in 1:nsp) {#
  lines(Bfin[,i]~c(1:nyrs), col=colerz[i], lty=lspbyrs, lwd=lwd)#
}#
#
dev.new(width=14, height=10)#
#range=c(1:(tsteps/3))#
maxR <- max(unlist(lapply(R,max)))#
minR <- min(unlist(lapply(R,min)))#
maxtR <- max(unlist(lapply(R,length)))#
plot(R[[1]]~c(1:length(R[[1]])), ylim=c(minR, maxR),xlim=c(0,maxtR),#
     xlab="step, step, step", ylab="Resource", type="n")#
for (i in 1:(nyrs-1)) {#
  lines(R[[i]]~c(1:length(R[[i]])), lty=lspbyrs, lwd=lwd)#
}#
# within years plots#
# tweaked a little to make biomass differences among years clearer#
dev.new(width=14, height=10)#
par(mfrow=c(3,3))#
par(mar=c(5, 4, 4, 8) + 0.1)#
selectyrs <- seq(1, nyrs, by=floor(nyrs/8))#
yrlength <- ndays/dt#
for (yr in seq_along(selectyrs)){#
  allsp <- B[selectyrs[yr], ,]#
  plot(B[selectyrs[yr], 1,]~c(1:yrlength), ylim=c(min(allsp), max(B)), #
       xlab="step, step, step",  ylab="Abundance", type="n",#
       main=paste("year: ", selectyrs[yr], sep=""))#
  for (sp in c(1:nsp)){#
    lines(B[selectyrs[yr], sp ,]~c(1:yrlength), ylim=c(min(allsp), max(B)),#
          col=colerz[sp])#
  }#
  par(new=TRUE)#
  plot(R[selectyrs[yr],]~c(1:yrlength), axes=FALSE, xlab="", ylab="",#
       ylim=c(min(R[selectyrs[yr],]), max(R[selectyrs[yr],])), type="l",#
       col=rcol, lty=lresbyrs, lwd=lwd)#
  raxis <- seq(0, max(R[selectyrs[yr],]), by=max(R[selectyrs[yr],])/10)#
  axis(4, at=raxis, labels=round(raxis, digits=2))#
  mtext("Resource", side=4, line=3, cex=0.75)#
}#
# two options for overlay histograms#
par(mfrow=c(1,1))#
#
dev.new(width=5, height=6)#
# (1) using the base package (I hate this, let's rm it)#
maxhist <- max(tauI, tauP)*1.1#
tauIfin <- tauI[which(Bfin[max(y),]>0)]#
tauIlosers <- tauI[which(Bfin[max(y),]<=0)]#
hist(tauIfin, col=rgb(1, 0, 0, 0.5), xlim=c(0, maxhist), ylim=c(0, nsp),#
     main=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "), xlab="taus")#
hist(tauP, col=rgb(0, 0, 1, 0.5), add=TRUE)#
hist(tauIlosers, col=rgb(0, 0, 1, 0.5), add=TRUE)#
#
dev.new(width=7, height=6)#
# (2) using ggplot, which really is good for this sort of thing#
tau.df <- data.frame(coexisted=Bfin[max(y),]>0, tauI=tauI)#
tau.df$coexisted[tau.df$coexisted==TRUE] <- "coexisted"#
tau.df$coexisted[tau.df$coexisted==FALSE] <- "doomed"#
tauP.df <- data.frame(coexisted=rep("tauP"), tauP=tauP)#
#
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
  geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
  geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
  labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))#
## notes for lizzie (by lizzie):#
# length of vectors is nsp#
# while loop runs through season until minimum R* is met#
# while loop runs until SECOND species is below its R*#
# but we should run it so at R* each species converts to seeds (maybe?)#
# for now we convert max biomass to seeds#
#
# y is years#
# t is within years#
#
# %% is mod (integer division: it's the remainder once a even division)#
#
print(c("The number of coexisting species are",sum(Bfin[max(y),]>0),"out of",nsp))'
Started 10 July 2011 ####
### By Lizzie & Megan ####
#
## VarEnvironments & Coexistence ###
#
# safety feature(s)#
options(stringsAsFactors=FALSE)#
#
# packages#
library(ggplot2)#
#
#set.seed(2)#
#
# define all parameters#
nsp <- 20    # number of spp#
nyrs1 <- 100  # number of yrs to run first stationary period#
ndays <- 1  # number of days in a growing season#
dt <- 0.001 # within yr timestep#
tsteps <- ndays/dt#
# params for adding on a nonstationary run after stationary run#
nyrs2 <- 50 # number of yrs for second run (nonstationary for now)#
nyrs <- nyrs1+nyrs2 # ALERT! change below once not doing stationary+nonstationary run#
y <- c(1:nyrs)#
#
## Extinction Threshold:  1 seed per hectare (assuming that initial density is 10 seeds per meter)#
ext <- 1/10000#
#
# set up graphics parameters#
colerz <- topo.colors(nsp)#
rcol <- "darkslateblue"#
linez <- rep(1:6, 100) # enough for 600 species for now#
lspbyrs <- 1#
lresbyrs <- 2#
lwd=2#
#
## Setting up loop for multiple model runs#
# To do still:#
# (1) add in everything crossyrsvars need (was lazy about this)#
# (2) add in resource stuff to withinyrs#
# (3) decide on list for each run, versus some other format#
#
modelruns <- list() # place to store output of runs#
nruns <- 2 # number of model runs to do#
for (j in c(1:nruns)){ # assuming, we will vary species characteristics between yrs ... #
###
## species characteristics#
###
b <-  rep(1,nsp)          # biomass of seedling#
s <-  rep(0.8,nsp)      # seedbank survival overwinter#
a <-  rep(20,nsp)        # slope of species uptake rate with increasing R#
u <-  rep(1,nsp)          # inverse of the max uptake rate#
c <-  rep(12,nsp)        # conversion of resource to biomass#
m <-  rep(0.05,nsp)     # mortality#
gmax <-  rep(0.5,nsp)     # max germination fraction#
h <-  rep(100,nsp)             # max rate of germination decrease following pulse#
phi <- rep(0.05,nsp)     # conversion of end-of-season plant biomass to seeds#
tauI <- runif(nsp,0.1, 0.9)    # time of max germ for sp i#
# set up tracking (to do for Lizzie, there should be code under here someday)#
theta <- rep(1,nsp)         # shape of species i uptake curve, remember it should be an integer!#
N0 <- rep(10,nsp)          # initial number of seeds (per meter square?)#
Rstar <- (m/(a*(c-m*u)))^(1/theta)#
#
crossyrsvars <- as.data.frame(cbind(b, s, a, u, c, m, gmax, h, phi, theta, tauI, Rstar))#
#
###
## time-varying env variables#
###
mu <- log(2)  #mean of resource distribution#
sigma <- 0.2  #sd of resource distribution#
R0 <- rlnorm(nyrs, mu, sigma) # intial R in a season#
eps <- 1              # evaporative stress#
#tauP <- 0.3           # timing of pulse#
p <- 2  #first parameter for beta distribution of tau#
q <- 2  #second parameter for beta distribution of tau#
tauPs <- rbeta(nyrs1, p, q) # change once not doing stationary+nonstationary run#
#
# nonstationary tauP, change once not doing stationary+nonstationary run#
qns <- seq(2, 20, length.out=nyrs2)#
tauPns <- rbeta(nyrs2, p, qns) # yes, it takes a vector! Yay!#
plot(tauPns~c(1:50))#
tauP <- c(tauPs, tauPns)#
#
###
## Within-growing season dynamics set-up#
###
R <- matrix(rep(0), nyrs, ndays/dt) # R is the resource level through the growing season (each yr)#
B <- array(rep(0), dim=c(nyrs,nsp,tsteps)) # where B is an array with yr (nyrs), spp biomass#
    # through growing season (ndays)#
N <- matrix(rep(0), nyrs, nsp) # number of seeds by yr and spp#
N[1,] <- N0  #initialize#
Bfin <- matrix(rep(0),nyrs,nsp) # biomass at end of year y#
#
###
## set-up for different coexistence mechanisms#
###
tauIstar <- matrix(rep(0),nyrs,nsp)#
Bnocomp <- matrix(rep(0),nyrs,nsp) # B without competition at end of year y#
E <- matrix(rep(0),nyrs,nsp)#
C <- matrix(rep(0),nyrs,nsp)#
#
###
## change to mapply someday?#
## for now, a loop#
## Better to use ODE solver within each year?#
###
#
for (y in c(1:(nyrs-1))){#
  g <- gmax*exp(-h*(tauP[y]-tauI)^2)  #germination fraction in year y#
  k<-1#
  R[y,k] <- R0[y]#
  B[y,,k] <- b*g*N[y,]#
  while (R[y,k]>min(Rstar)){#
      f <- (a*R[y,k]^theta)/(1+a*u*R[y,k]^theta)#
      B[y,,k+1] <- B[y,,k]+(c*f-m)*B[y,,k]*dt#
      R[y,k+1] <- R[y, k] -dt*(t(B[y,,k]) %*% f + eps*R[y,k])#
      R[y,k+1] <- R[y,k+1]*(R[y,k+1]>0)#
      k <- k+1#
    }#
  Bfin[y,] <- apply(B[y,,], 1, max)  #final biomass#
  # add some internal calculations to make other calculations easier#
  tauIstar[y,] <- (log(R0[y])/eps)-(1/(theta*eps))*log(m/(a*c-a*u*m))#
  Bnocomp[y,] <- B[y,,1]*((1+a*u*R0[y]^theta)/(1+a*u*R0[y]^theta*exp(-eps*tauIstar[y,]*theta)))*#
      exp((-c/(u*eps*theta))-m*tauIstar[y,])#
  # E[y,] <- log(s*g*(phi*Bnocomp[y,]-1))#
  # C[y,] <- log((phi*Bnocomp[y,]-1)/(phi*Bfin[y,]-1))#
  N[y+1,] <- s*(N[y,]*(1-g)+phi*Bfin[y,])  #convert biomass to seeds and overwinter#
  N[y+1,] <- N[y+1,]*(N[y+1,]>ext)  #if density does not exceed ext, set to zero#
}#
modelruns[[j]] <- list(crossyrsvars, Bfin, E)#
# could also make each run a multi-part dataframe with common names#
# so something like:#
# modelruns[[paste("crossyrs", j, sep="")]] <- crossyrsvars#
# modelruns[[paste("withinyrs", j, sep="")]] <- Bfin#
}#
# between years plot#
dev.new(width=14, height=10)#
plot(Bfin[,1]~c(1:nyrs), ylim=c(min(Bfin), max(Bfin)),#
    xlab="year", ylab="Abundance", type="n")#
for (i in 1:nsp) {#
  lines(Bfin[,i]~c(1:nyrs), col=colerz[i], lty=lspbyrs, lwd=lwd)#
}#
#
dev.new(width=14, height=10)#
range=c(1:(tsteps/3))#
plot(R[1,range]~range, ylim=c(min(R), max(R)),#
     xlab="step, step, step", ylab="Resource", type="n")#
for (i in 2:nyrs) {#
  lines(R[i,range]~range, col=colerz[i], lty=lspbyrs, lwd=lwd)#
}#
# within years plots#
# tweaked a little to make biomass differences among years clearer#
dev.new(width=14, height=10)#
par(mfrow=c(3,3))#
par(mar=c(5, 4, 4, 8) + 0.1)#
selectyrs <- seq(1, nyrs, by=floor(nyrs/8))#
yrlength <- ndays/dt#
for (yr in seq_along(selectyrs)){#
    allsp <- B[selectyrs[yr], ,]#
    plot(B[selectyrs[yr], 1,]~c(1:yrlength), ylim=c(min(allsp), max(B)), #
        xlab="step, step, step",  ylab="Abundance", type="n",#
        main=paste("year: ", selectyrs[yr], sep=""))#
    for (sp in c(1:nsp)){#
        lines(B[selectyrs[yr], sp ,]~c(1:yrlength), ylim=c(min(allsp), max(B)),#
            col=colerz[sp])#
    }#
    par(new=TRUE)#
    plot(R[selectyrs[yr],]~c(1:yrlength), axes=FALSE, xlab="", ylab="",#
        ylim=c(min(R[selectyrs[yr],]), max(R[selectyrs[yr],])), type="l",#
        col=rcol, lty=lresbyrs, lwd=lwd)#
    raxis <- seq(0, max(R[selectyrs[yr],]), by=max(R[selectyrs[yr],])/10)#
    axis(4, at=raxis, labels=round(raxis, digits=2))#
    mtext("Resource", side=4, line=3, cex=0.75)#
}#
# two options for overlay histograms#
par(mfrow=c(1,1))#
#
dev.new(width=5, height=6)#
# (1) using the base package (I hate this, let's rm it)#
maxhist <- max(tauI, tauP)*1.1#
tauIfin <- tauI[which(Bfin[max(y),]>0)]#
tauIlosers <- tauI[which(Bfin[max(y),]<=0)]#
hist(tauIfin, col=rgb(1, 0, 0, 0.5), xlim=c(0, maxhist), ylim=c(0, nsp),#
    main=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "), xlab="taus")#
hist(tauP, col=rgb(0, 0, 1, 0.5), add=TRUE)#
hist(tauIlosers, col=rgb(0, 0, 1, 0.5), add=TRUE)#
#
dev.new(width=7, height=6)#
# (2) using ggplot, which really is good for this sort of thing#
tau.df <- data.frame(coexisted=Bfin[max(y),]>0, tauI=tauI)#
tau.df$coexisted[tau.df$coexisted==TRUE] <- "coexisted"#
tau.df$coexisted[tau.df$coexisted==FALSE] <- "doomed"#
tauP.df <- data.frame(coexisted=rep("tauP"), tauP=tauP)#
#
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))#
## notes for lizzie (by lizzie):#
# length of vectors is nsp#
# while loop runs through season until minimum R* is met#
# while loop runs until SECOND species is below its R*#
# but we should run it so at R* each species converts to seeds (maybe?)#
# for now we convert max biomass to seeds#
#
# y is years#
# t is within years#
#
# %% is mod (integer division: it's the remainder once a even division)#
#
print(c("The number of coexisting species are",sum(Bfin[max(y),]>0),"out of",nsp))
Started 10 July 2011 ####
### By Lizzie & Megan ####
#
## VarEnvironments & Coexistence ###
#
# safety feature(s)#
options(stringsAsFactors=FALSE)#
#
# packages#
library(ggplot2)#
#
#set.seed(2)#
#
# define all parameters#
nsp <- 50    # number of spp#
nyrs1 <- 100  # number of yrs to run first stationary period#
ndays <- 1  # number of days in a growing season#
dt <- 0.001 # within yr timestep#
tsteps <- ndays/dt#
# params for adding on a nonstationary run after stationary run#
nyrs2 <- 50 # number of yrs for second run (nonstationary for now)#
nyrs <- nyrs1+nyrs2 # ALERT! change below once not doing stationary+nonstationary run#
y <- c(1:nyrs)#
#
## Extinction Threshold:  1 seed per hectare (assuming that initial density is 10 seeds per meter)#
ext <- 1/10000#
#
# set up graphics parameters#
colerz <- topo.colors(nsp)#
rcol <- "darkslateblue"#
linez <- rep(1:6, 100) # enough for 600 species for now#
lspbyrs <- 1#
lresbyrs <- 2#
lwd=2#
#
## Setting up loop for multiple model runs#
# To do still:#
# (1) add in everything crossyrsvars need (was lazy about this)#
# (2) add in resource stuff to withinyrs#
# (3) decide on list for each run, versus some other format#
#
modelruns <- list() # place to store output of runs#
nruns <- 2 # number of model runs to do#
for (j in c(1:nruns)){ # assuming, we will vary species characteristics between yrs ... #
###
## species characteristics#
###
b <-  rep(1,nsp)          # biomass of seedling#
s <-  rep(0.8,nsp)      # seedbank survival overwinter#
a <-  rep(20,nsp)        # slope of species uptake rate with increasing R#
u <-  rep(1,nsp)          # inverse of the max uptake rate#
c <-  rep(12,nsp)        # conversion of resource to biomass#
m <-  rep(0.05,nsp)     # mortality#
gmax <-  rep(0.5,nsp)     # max germination fraction#
h <-  rep(100,nsp)             # max rate of germination decrease following pulse#
phi <- rep(0.05,nsp)     # conversion of end-of-season plant biomass to seeds#
tauI <- runif(nsp,0.1, 0.9)    # time of max germ for sp i#
# set up tracking (to do for Lizzie, there should be code under here someday)#
theta <- rep(1,nsp)         # shape of species i uptake curve, remember it should be an integer!#
N0 <- rep(10,nsp)          # initial number of seeds (per meter square?)#
Rstar <- (m/(a*(c-m*u)))^(1/theta)#
#
crossyrsvars <- as.data.frame(cbind(b, s, a, u, c, m, gmax, h, phi, theta, tauI, Rstar))#
#
###
## time-varying env variables#
###
mu <- log(2)  #mean of resource distribution#
sigma <- 0.2  #sd of resource distribution#
R0 <- rlnorm(nyrs, mu, sigma) # intial R in a season#
eps <- 1              # evaporative stress#
#tauP <- 0.3           # timing of pulse#
p <- 2  #first parameter for beta distribution of tau#
q <- 2  #second parameter for beta distribution of tau#
tauPs <- rbeta(nyrs1, p, q) # change once not doing stationary+nonstationary run#
#
# nonstationary tauP, change once not doing stationary+nonstationary run#
qns <- seq(2, 20, length.out=nyrs2)#
tauPns <- rbeta(nyrs2, p, qns) # yes, it takes a vector! Yay!#
plot(tauPns~c(1:50))#
tauP <- c(tauPs, tauPns)#
#
###
## Within-growing season dynamics set-up#
###
R <- matrix(rep(0), nyrs, ndays/dt) # R is the resource level through the growing season (each yr)#
B <- array(rep(0), dim=c(nyrs,nsp,tsteps)) # where B is an array with yr (nyrs), spp biomass#
    # through growing season (ndays)#
N <- matrix(rep(0), nyrs, nsp) # number of seeds by yr and spp#
N[1,] <- N0  #initialize#
Bfin <- matrix(rep(0),nyrs,nsp) # biomass at end of year y#
#
###
## set-up for different coexistence mechanisms#
###
tauIstar <- matrix(rep(0),nyrs,nsp)#
Bnocomp <- matrix(rep(0),nyrs,nsp) # B without competition at end of year y#
E <- matrix(rep(0),nyrs,nsp)#
C <- matrix(rep(0),nyrs,nsp)#
#
###
## change to mapply someday?#
## for now, a loop#
## Better to use ODE solver within each year?#
###
#
for (y in c(1:(nyrs-1))){#
  g <- gmax*exp(-h*(tauP[y]-tauI)^2)  #germination fraction in year y#
  k<-1#
  R[y,k] <- R0[y]#
  B[y,,k] <- b*g*N[y,]#
  while (R[y,k]>min(Rstar)){#
      f <- (a*R[y,k]^theta)/(1+a*u*R[y,k]^theta)#
      B[y,,k+1] <- B[y,,k]+(c*f-m)*B[y,,k]*dt#
      R[y,k+1] <- R[y, k] -dt*(t(B[y,,k]) %*% f + eps*R[y,k])#
      R[y,k+1] <- R[y,k+1]*(R[y,k+1]>0)#
      k <- k+1#
    }#
  Bfin[y,] <- apply(B[y,,], 1, max)  #final biomass#
  # add some internal calculations to make other calculations easier#
  tauIstar[y,] <- (log(R0[y])/eps)-(1/(theta*eps))*log(m/(a*c-a*u*m))#
  Bnocomp[y,] <- B[y,,1]*((1+a*u*R0[y]^theta)/(1+a*u*R0[y]^theta*exp(-eps*tauIstar[y,]*theta)))*#
      exp((-c/(u*eps*theta))-m*tauIstar[y,])#
  # E[y,] <- log(s*g*(phi*Bnocomp[y,]-1))#
  # C[y,] <- log((phi*Bnocomp[y,]-1)/(phi*Bfin[y,]-1))#
  N[y+1,] <- s*(N[y,]*(1-g)+phi*Bfin[y,])  #convert biomass to seeds and overwinter#
  N[y+1,] <- N[y+1,]*(N[y+1,]>ext)  #if density does not exceed ext, set to zero#
}#
modelruns[[j]] <- list(crossyrsvars, Bfin, E)#
# could also make each run a multi-part dataframe with common names#
# so something like:#
# modelruns[[paste("crossyrs", j, sep="")]] <- crossyrsvars#
# modelruns[[paste("withinyrs", j, sep="")]] <- Bfin#
}#
# between years plot#
dev.new(width=7, height=5)#
plot(Bfin[,1]~c(1:nyrs), ylim=c(min(Bfin), max(Bfin)),#
    xlab="year", ylab="Abundance", type="n")#
for (i in 1:nsp) {#
  lines(Bfin[,i]~c(1:nyrs), col=colerz[i], lty=lspbyrs, lwd=lwd)#
}#
#
dev.new(width=7, height=5)#
range=c(1:(tsteps/3))#
plot(R[1,range]~range, ylim=c(min(R), max(R)),#
     xlab="step, step, step", ylab="Resource", type="n")#
for (i in 2:nyrs) {#
  lines(R[i,range]~range, col=colerz[i], lty=lspbyrs, lwd=lwd)#
}#
# within years plots#
# tweaked a little to make biomass differences among years clearer#
dev.new(width=7, height=5)#
par(mfrow=c(3,3))#
par(mar=c(5, 4, 4, 8) + 0.1)#
selectyrs <- seq(1, nyrs, by=floor(nyrs/8))#
yrlength <- ndays/dt#
for (yr in seq_along(selectyrs)){#
    allsp <- B[selectyrs[yr], ,]#
    plot(B[selectyrs[yr], 1,]~c(1:yrlength), ylim=c(min(allsp), max(B)), #
        xlab="step, step, step",  ylab="Abundance", type="n",#
        main=paste("year: ", selectyrs[yr], sep=""))#
    for (sp in c(1:nsp)){#
        lines(B[selectyrs[yr], sp ,]~c(1:yrlength), ylim=c(min(allsp), max(B)),#
            col=colerz[sp])#
    }#
    par(new=TRUE)#
    plot(R[selectyrs[yr],]~c(1:yrlength), axes=FALSE, xlab="", ylab="",#
        ylim=c(min(R[selectyrs[yr],]), max(R[selectyrs[yr],])), type="l",#
        col=rcol, lty=lresbyrs, lwd=lwd)#
    raxis <- seq(0, max(R[selectyrs[yr],]), by=max(R[selectyrs[yr],])/10)#
    axis(4, at=raxis, labels=round(raxis, digits=2))#
    mtext("Resource", side=4, line=3, cex=0.75)#
}#
# two options for overlay histograms#
par(mfrow=c(1,1))#
#
dev.new(width=5, height=6)#
# (1) using the base package (I hate this, let's rm it)#
maxhist <- max(tauI, tauP)*1.1#
tauIfin <- tauI[which(Bfin[max(y),]>0)]#
tauIlosers <- tauI[which(Bfin[max(y),]<=0)]#
hist(tauIfin, col=rgb(1, 0, 0, 0.5), xlim=c(0, maxhist), ylim=c(0, nsp),#
    main=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "), xlab="taus")#
hist(tauP, col=rgb(0, 0, 1, 0.5), add=TRUE)#
hist(tauIlosers, col=rgb(0, 0, 1, 0.5), add=TRUE)#
#
dev.new(width=7, height=6)#
# (2) using ggplot, which really is good for this sort of thing#
tau.df <- data.frame(coexisted=Bfin[max(y),]>0, tauI=tauI)#
tau.df$coexisted[tau.df$coexisted==TRUE] <- "coexisted"#
tau.df$coexisted[tau.df$coexisted==FALSE] <- "doomed"#
tauP.df <- data.frame(coexisted=rep("tauP"), tauP=tauP)#
#
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))#
## notes for lizzie (by lizzie):#
# length of vectors is nsp#
# while loop runs through season until minimum R* is met#
# while loop runs until SECOND species is below its R*#
# but we should run it so at R* each species converts to seeds (maybe?)#
# for now we convert max biomass to seeds#
#
# y is years#
# t is within years#
#
# %% is mod (integer division: it's the remainder once a even division)#
#
print(c("The number of coexisting species are",sum(Bfin[max(y),]>0),"out of",nsp))
Started 10 July 2011 ####
### By Lizzie & Megan ####
#
## VarEnvironments & Coexistence ###
#
# safety feature(s)#
options(stringsAsFactors=FALSE)#
#
# packages#
library(ggplot2)#
#
#set.seed(2)#
#
# define all parameters#
nsp <- 50    # number of spp#
nyrs1 <- 400  # number of yrs to run first stationary period#
ndays <- 1  # number of days in a growing season#
dt <- 0.001 # within yr timestep#
tsteps <- ndays/dt#
# params for adding on a nonstationary run after stationary run#
nyrs2 <- 100 # number of yrs for second run (nonstationary for now)#
nyrs <- nyrs1+nyrs2 # ALERT! change below once not doing stationary+nonstationary run#
y <- c(1:nyrs)#
#
## Extinction Threshold:  1 seed per hectare (assuming that initial density is 10 seeds per meter)#
ext <- 1/10000#
#
# set up graphics parameters#
colerz <- topo.colors(nsp)#
rcol <- "darkslateblue"#
linez <- rep(1:6, 100) # enough for 600 species for now#
lspbyrs <- 1#
lresbyrs <- 2#
lwd=2#
#
## Setting up loop for multiple model runs#
# To do still:#
# (1) add in everything crossyrsvars need (was lazy about this)#
# (2) add in resource stuff to withinyrs#
# (3) decide on list for each run, versus some other format#
#
modelruns <- list() # place to store output of runs#
nruns <- 2 # number of model runs to do#
for (j in c(1:nruns)){ # assuming, we will vary species characteristics between yrs ... #
###
## species characteristics#
###
b <-  rep(1,nsp)          # biomass of seedling#
s <-  rep(0.8,nsp)      # seedbank survival overwinter#
a <-  rep(20,nsp)        # slope of species uptake rate with increasing R#
u <-  rep(1,nsp)          # inverse of the max uptake rate#
c <-  rep(12,nsp)        # conversion of resource to biomass#
m <-  rep(0.05,nsp)     # mortality#
gmax <-  rep(0.5,nsp)     # max germination fraction#
h <-  rep(100,nsp)             # max rate of germination decrease following pulse#
phi <- rep(0.05,nsp)     # conversion of end-of-season plant biomass to seeds#
tauI <- runif(nsp,0.1, 0.9)    # time of max germ for sp i#
# set up tracking (to do for Lizzie, there should be code under here someday)#
theta <- rep(1,nsp)         # shape of species i uptake curve, remember it should be an integer!#
N0 <- rep(10,nsp)          # initial number of seeds (per meter square?)#
Rstar <- (m/(a*(c-m*u)))^(1/theta)#
#
crossyrsvars <- as.data.frame(cbind(b, s, a, u, c, m, gmax, h, phi, theta, tauI, Rstar))#
#
###
## time-varying env variables#
###
mu <- log(2)  #mean of resource distribution#
sigma <- 0.2  #sd of resource distribution#
R0 <- rlnorm(nyrs, mu, sigma) # intial R in a season#
eps <- 1              # evaporative stress#
#tauP <- 0.3           # timing of pulse#
p <- 2  #first parameter for beta distribution of tau#
q <- 2  #second parameter for beta distribution of tau#
tauPs <- rbeta(nyrs1, p, q) # change once not doing stationary+nonstationary run#
#
# nonstationary tauP, change once not doing stationary+nonstationary run#
qns <- seq(2, 20, length.out=nyrs2)#
tauPns <- rbeta(nyrs2, p, qns) # yes, it takes a vector! Yay!#
plot(tauPns~c(1:50))#
tauP <- c(tauPs, tauPns)#
#
###
## Within-growing season dynamics set-up#
###
R <- matrix(rep(0), nyrs, ndays/dt) # R is the resource level through the growing season (each yr)#
B <- array(rep(0), dim=c(nyrs,nsp,tsteps)) # where B is an array with yr (nyrs), spp biomass#
    # through growing season (ndays)#
N <- matrix(rep(0), nyrs, nsp) # number of seeds by yr and spp#
N[1,] <- N0  #initialize#
Bfin <- matrix(rep(0),nyrs,nsp) # biomass at end of year y#
#
###
## set-up for different coexistence mechanisms#
###
tauIstar <- matrix(rep(0),nyrs,nsp)#
Bnocomp <- matrix(rep(0),nyrs,nsp) # B without competition at end of year y#
E <- matrix(rep(0),nyrs,nsp)#
C <- matrix(rep(0),nyrs,nsp)#
#
###
## change to mapply someday?#
## for now, a loop#
## Better to use ODE solver within each year?#
###
#
for (y in c(1:(nyrs-1))){#
  g <- gmax*exp(-h*(tauP[y]-tauI)^2)  #germination fraction in year y#
  k<-1#
  R[y,k] <- R0[y]#
  B[y,,k] <- b*g*N[y,]#
  while (R[y,k]>min(Rstar)){#
      f <- (a*R[y,k]^theta)/(1+a*u*R[y,k]^theta)#
      B[y,,k+1] <- B[y,,k]+(c*f-m)*B[y,,k]*dt#
      R[y,k+1] <- R[y, k] -dt*(t(B[y,,k]) %*% f + eps*R[y,k])#
      R[y,k+1] <- R[y,k+1]*(R[y,k+1]>0)#
      k <- k+1#
    }#
  Bfin[y,] <- apply(B[y,,], 1, max)  #final biomass#
  # add some internal calculations to make other calculations easier#
  tauIstar[y,] <- (log(R0[y])/eps)-(1/(theta*eps))*log(m/(a*c-a*u*m))#
  Bnocomp[y,] <- B[y,,1]*((1+a*u*R0[y]^theta)/(1+a*u*R0[y]^theta*exp(-eps*tauIstar[y,]*theta)))*#
      exp((-c/(u*eps*theta))-m*tauIstar[y,])#
  # E[y,] <- log(s*g*(phi*Bnocomp[y,]-1))#
  # C[y,] <- log((phi*Bnocomp[y,]-1)/(phi*Bfin[y,]-1))#
  N[y+1,] <- s*(N[y,]*(1-g)+phi*Bfin[y,])  #convert biomass to seeds and overwinter#
  N[y+1,] <- N[y+1,]*(N[y+1,]>ext)  #if density does not exceed ext, set to zero#
}#
modelruns[[j]] <- list(crossyrsvars, Bfin, E)#
# could also make each run a multi-part dataframe with common names#
# so something like:#
# modelruns[[paste("crossyrs", j, sep="")]] <- crossyrsvars#
# modelruns[[paste("withinyrs", j, sep="")]] <- Bfin#
}#
# between years plot#
dev.new(width=7, height=5)#
plot(Bfin[,1]~c(1:nyrs), ylim=c(min(Bfin), max(Bfin)),#
    xlab="year", ylab="Abundance", type="n")#
for (i in 1:nsp) {#
  lines(Bfin[,i]~c(1:nyrs), col=colerz[i], lty=lspbyrs, lwd=lwd)#
}#
#
dev.new(width=7, height=5)#
range=c(1:(tsteps/3))#
plot(R[1,range]~range, ylim=c(min(R), max(R)),#
     xlab="step, step, step", ylab="Resource", type="n")#
for (i in 2:nyrs) {#
  lines(R[i,range]~range, col=colerz[i], lty=lspbyrs, lwd=lwd)#
}#
# within years plots#
# tweaked a little to make biomass differences among years clearer#
dev.new(width=7, height=5)#
par(mfrow=c(3,3))#
par(mar=c(5, 4, 4, 8) + 0.1)#
selectyrs <- seq(1, nyrs, by=floor(nyrs/8))#
yrlength <- ndays/dt#
for (yr in seq_along(selectyrs)){#
    allsp <- B[selectyrs[yr], ,]#
    plot(B[selectyrs[yr], 1,]~c(1:yrlength), ylim=c(min(allsp), max(B)), #
        xlab="step, step, step",  ylab="Abundance", type="n",#
        main=paste("year: ", selectyrs[yr], sep=""))#
    for (sp in c(1:nsp)){#
        lines(B[selectyrs[yr], sp ,]~c(1:yrlength), ylim=c(min(allsp), max(B)),#
            col=colerz[sp])#
    }#
    par(new=TRUE)#
    plot(R[selectyrs[yr],]~c(1:yrlength), axes=FALSE, xlab="", ylab="",#
        ylim=c(min(R[selectyrs[yr],]), max(R[selectyrs[yr],])), type="l",#
        col=rcol, lty=lresbyrs, lwd=lwd)#
    raxis <- seq(0, max(R[selectyrs[yr],]), by=max(R[selectyrs[yr],])/10)#
    axis(4, at=raxis, labels=round(raxis, digits=2))#
    mtext("Resource", side=4, line=3, cex=0.75)#
}#
# two options for overlay histograms#
par(mfrow=c(1,1))#
#
dev.new(width=5, height=6)#
# (1) using the base package (I hate this, let's rm it)#
maxhist <- max(tauI, tauP)*1.1#
tauIfin <- tauI[which(Bfin[max(y),]>0)]#
tauIlosers <- tauI[which(Bfin[max(y),]<=0)]#
hist(tauIfin, col=rgb(1, 0, 0, 0.5), xlim=c(0, maxhist), ylim=c(0, nsp),#
    main=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "), xlab="taus")#
hist(tauP, col=rgb(0, 0, 1, 0.5), add=TRUE)#
hist(tauIlosers, col=rgb(0, 0, 1, 0.5), add=TRUE)#
#
dev.new(width=7, height=6)#
# (2) using ggplot, which really is good for this sort of thing#
tau.df <- data.frame(coexisted=Bfin[max(y),]>0, tauI=tauI)#
tau.df$coexisted[tau.df$coexisted==TRUE] <- "coexisted"#
tau.df$coexisted[tau.df$coexisted==FALSE] <- "doomed"#
tauP.df <- data.frame(coexisted=rep("tauP"), tauP=tauP)#
#
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    geom_density(data=tauP.df[1:400,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[401:500,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))#
## notes for lizzie (by lizzie):#
# length of vectors is nsp#
# while loop runs through season until minimum R* is met#
# while loop runs until SECOND species is below its R*#
# but we should run it so at R* each species converts to seeds (maybe?)#
# for now we convert max biomass to seeds#
#
# y is years#
# t is within years#
#
# %% is mod (integer division: it's the remainder once a even division)#
#
print(c("The number of coexisting species are",sum(Bfin[max(y),]>0),"out of",nsp))
Started 10 July 2011 ####
### By Lizzie & Megan ####
#
## VarEnvironments & Coexistence ###
#
# safety feature(s)#
options(stringsAsFactors=FALSE)#
#
# packages#
library(ggplot2)#
#
#set.seed(2)#
#
# define all parameters#
nsp <- 50    # number of spp#
nyrs1 <- 100  # number of yrs to run first stationary period#
ndays <- 1  # number of days in a growing season#
dt <- 0.001 # within yr timestep#
tsteps <- ndays/dt#
# params for adding on a nonstationary run after stationary run#
nyrs2 <- 50 # number of yrs for second run (nonstationary for now)#
nyrs <- nyrs1+nyrs2 # ALERT! change below once not doing stationary+nonstationary run#
y <- c(1:nyrs)#
#
## Extinction Threshold:  1 seed per hectare (assuming that initial density is 10 seeds per meter)#
ext <- 1/10000#
#
# set up graphics parameters#
colerz <- topo.colors(nsp)#
rcol <- "darkslateblue"#
linez <- rep(1:6, 100) # enough for 600 species for now#
lspbyrs <- 1#
lresbyrs <- 2#
lwd=2#
#
## Setting up loop for multiple model runs#
# To do still:#
# (1) add in everything crossyrsvars need (was lazy about this)#
# (2) add in resource stuff to withinyrs#
# (3) decide on list for each run, versus some other format#
#
modelruns <- list() # place to store output of runs#
nruns <- 2 # number of model runs to do#
for (j in c(1:nruns)){ # assuming, we will vary species characteristics between yrs ... #
###
## species characteristics#
###
b <-  rep(1,nsp)          # biomass of seedling#
s <-  rep(0.8,nsp)      # seedbank survival overwinter#
a <-  rep(20,nsp)        # slope of species uptake rate with increasing R#
u <-  rep(1,nsp)          # inverse of the max uptake rate#
c <-  rep(12,nsp)        # conversion of resource to biomass#
m <-  rep(0.05,nsp)     # mortality#
gmax <-  rep(0.5,nsp)     # max germination fraction#
h <-  rep(100,nsp)             # max rate of germination decrease following pulse#
phi <- rep(0.05,nsp)     # conversion of end-of-season plant biomass to seeds#
tauI <- runif(nsp,0.1, 0.9)    # time of max germ for sp i#
# set up tracking (to do for Lizzie, there should be code under here someday)#
theta <- rep(1,nsp)         # shape of species i uptake curve, remember it should be an integer!#
N0 <- rep(10,nsp)          # initial number of seeds (per meter square?)#
Rstar <- (m/(a*(c-m*u)))^(1/theta)#
#
crossyrsvars <- as.data.frame(cbind(b, s, a, u, c, m, gmax, h, phi, theta, tauI, Rstar))#
#
###
## time-varying env variables#
###
mu <- log(2)  #mean of resource distribution#
sigma <- 0.2  #sd of resource distribution#
R0 <- rlnorm(nyrs, mu, sigma) # intial R in a season#
eps <- 1              # evaporative stress#
#tauP <- 0.3           # timing of pulse#
p <- 2  #first parameter for beta distribution of tau#
q <- 2  #second parameter for beta distribution of tau#
tauPs <- rbeta(nyrs1, p, q) # change once not doing stationary+nonstationary run#
#
# nonstationary tauP, change once not doing stationary+nonstationary run#
qns <- seq(2, 20, length.out=nyrs2)#
tauPns <- rbeta(nyrs2, p, qns) # yes, it takes a vector! Yay!#
plot(tauPns~c(1:50))#
tauP <- c(tauPs, tauPns)#
#
###
## Within-growing season dynamics set-up#
###
R <- matrix(rep(0), nyrs, ndays/dt) # R is the resource level through the growing season (each yr)#
B <- array(rep(0), dim=c(nyrs,nsp,tsteps)) # where B is an array with yr (nyrs), spp biomass#
    # through growing season (ndays)#
N <- matrix(rep(0), nyrs, nsp) # number of seeds by yr and spp#
N[1,] <- N0  #initialize#
Bfin <- matrix(rep(0),nyrs,nsp) # biomass at end of year y#
#
###
## set-up for different coexistence mechanisms#
###
tauIstar <- matrix(rep(0),nyrs,nsp)#
Bnocomp <- matrix(rep(0),nyrs,nsp) # B without competition at end of year y#
E <- matrix(rep(0),nyrs,nsp)#
C <- matrix(rep(0),nyrs,nsp)#
#
###
## change to mapply someday?#
## for now, a loop#
## Better to use ODE solver within each year?#
###
#
for (y in c(1:(nyrs-1))){#
  g <- gmax*exp(-h*(tauP[y]-tauI)^2)  #germination fraction in year y#
  k<-1#
  R[y,k] <- R0[y]#
  B[y,,k] <- b*g*N[y,]#
  while (R[y,k]>min(Rstar)){#
      f <- (a*R[y,k]^theta)/(1+a*u*R[y,k]^theta)#
      B[y,,k+1] <- B[y,,k]+(c*f-m)*B[y,,k]*dt#
      R[y,k+1] <- R[y, k] -dt*(t(B[y,,k]) %*% f + eps*R[y,k])#
      R[y,k+1] <- R[y,k+1]*(R[y,k+1]>0)#
      k <- k+1#
    }#
  Bfin[y,] <- apply(B[y,,], 1, max)  #final biomass#
  # add some internal calculations to make other calculations easier#
  tauIstar[y,] <- (log(R0[y])/eps)-(1/(theta*eps))*log(m/(a*c-a*u*m))#
  Bnocomp[y,] <- B[y,,1]*((1+a*u*R0[y]^theta)/(1+a*u*R0[y]^theta*exp(-eps*tauIstar[y,]*theta)))*#
      exp((-c/(u*eps*theta))-m*tauIstar[y,])#
  # E[y,] <- log(s*g*(phi*Bnocomp[y,]-1))#
  # C[y,] <- log((phi*Bnocomp[y,]-1)/(phi*Bfin[y,]-1))#
  N[y+1,] <- s*(N[y,]*(1-g)+phi*Bfin[y,])  #convert biomass to seeds and overwinter#
  N[y+1,] <- N[y+1,]*(N[y+1,]>ext)  #if density does not exceed ext, set to zero#
}#
modelruns[[j]] <- list(crossyrsvars, Bfin, E)#
# could also make each run a multi-part dataframe with common names#
# so something like:#
# modelruns[[paste("crossyrs", j, sep="")]] <- crossyrsvars#
# modelruns[[paste("withinyrs", j, sep="")]] <- Bfin#
}#
# between years plot#
dev.new(width=7, height=5)#
plot(Bfin[,1]~c(1:nyrs), ylim=c(min(Bfin), max(Bfin)),#
    xlab="year", ylab="Abundance", type="n")#
for (i in 1:nsp) {#
  lines(Bfin[,i]~c(1:nyrs), col=colerz[i], lty=lspbyrs, lwd=lwd)#
}#
#
dev.new(width=7, height=5)#
range=c(1:(tsteps/3))#
plot(R[1,range]~range, ylim=c(min(R), max(R)),#
     xlab="step, step, step", ylab="Resource", type="n")#
for (i in 2:nyrs) {#
  lines(R[i,range]~range, col=colerz[i], lty=lspbyrs, lwd=lwd)#
}#
# within years plots#
# tweaked a little to make biomass differences among years clearer#
dev.new(width=7, height=5)#
par(mfrow=c(3,3))#
par(mar=c(5, 4, 4, 8) + 0.1)#
selectyrs <- seq(1, nyrs, by=floor(nyrs/8))#
yrlength <- ndays/dt#
for (yr in seq_along(selectyrs)){#
    allsp <- B[selectyrs[yr], ,]#
    plot(B[selectyrs[yr], 1,]~c(1:yrlength), ylim=c(min(allsp), max(B)), #
        xlab="step, step, step",  ylab="Abundance", type="n",#
        main=paste("year: ", selectyrs[yr], sep=""))#
    for (sp in c(1:nsp)){#
        lines(B[selectyrs[yr], sp ,]~c(1:yrlength), ylim=c(min(allsp), max(B)),#
            col=colerz[sp])#
    }#
    par(new=TRUE)#
    plot(R[selectyrs[yr],]~c(1:yrlength), axes=FALSE, xlab="", ylab="",#
        ylim=c(min(R[selectyrs[yr],]), max(R[selectyrs[yr],])), type="l",#
        col=rcol, lty=lresbyrs, lwd=lwd)#
    raxis <- seq(0, max(R[selectyrs[yr],]), by=max(R[selectyrs[yr],])/10)#
    axis(4, at=raxis, labels=round(raxis, digits=2))#
    mtext("Resource", side=4, line=3, cex=0.75)#
}#
# two options for overlay histograms#
par(mfrow=c(1,1))#
#
dev.new(width=5, height=6)#
# (1) using the base package (I hate this, let's rm it)#
maxhist <- max(tauI, tauP)*1.1#
tauIfin <- tauI[which(Bfin[max(y),]>0)]#
tauIlosers <- tauI[which(Bfin[max(y),]<=0)]#
hist(tauIfin, col=rgb(1, 0, 0, 0.5), xlim=c(0, maxhist), ylim=c(0, nsp),#
    main=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "), xlab="taus")#
hist(tauP, col=rgb(0, 0, 1, 0.5), add=TRUE)#
hist(tauIlosers, col=rgb(0, 0, 1, 0.5), add=TRUE)#
#
dev.new(width=7, height=6)#
# (2) using ggplot, which really is good for this sort of thing#
tau.df <- data.frame(coexisted=Bfin[max(y),]>0, tauI=tauI)#
tau.df$coexisted[tau.df$coexisted==TRUE] <- "coexisted"#
tau.df$coexisted[tau.df$coexisted==FALSE] <- "doomed"#
tauP.df <- data.frame(coexisted=rep("tauP"), tauP=tauP)#
#
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))#
## notes for lizzie (by lizzie):#
# length of vectors is nsp#
# while loop runs through season until minimum R* is met#
# while loop runs until SECOND species is below its R*#
# but we should run it so at R* each species converts to seeds (maybe?)#
# for now we convert max biomass to seeds#
#
# y is years#
# t is within years#
#
# %% is mod (integer division: it's the remainder once a even division)#
#
print(c("The number of coexisting species are",sum(Bfin[max(y),]>0),"out of",nsp))
within years plots#
# tweaked a little to make biomass differences among years clearer#
dev.new(width=7, height=5)#
par(mfrow=c(3,3))#
par(mar=c(5, 4, 4, 8) + 0.1)#
selectyrs <- seq(1, nyrs, by=floor(nyrs/8))#
yrlength <- ndays/dt#
for (yr in seq_along(selectyrs)){#
    allsp <- B[selectyrs[yr], ,]#
    plot(B[selectyrs[yr], 1,]~c(1:yrlength), ylim=c(min(allsp), max(B)), #
        xlab="step, step, step",  ylab="Abundance", type="n",#
        main=paste("year: ", selectyrs[yr], sep=""))#
    for (sp in c(1:nsp)){#
        lines(B[selectyrs[yr], sp ,]~c(1:yrlength), ylim=c(min(allsp), max(B)),#
            col=colerz[sp])#
    }#
    par(new=TRUE)#
    plot(R[selectyrs[yr],]~c(1:yrlength), axes=FALSE, xlab="", ylab="",#
        ylim=c(min(R[selectyrs[yr],]), max(R[selectyrs[yr],])), type="l",#
        col=rcol, lty=lresbyrs, lwd=lwd)#
    raxis <- seq(0, max(R[selectyrs[yr],]), by=max(R[selectyrs[yr],])/10)#
    axis(4, at=raxis, labels=round(raxis, digits=2))#
    mtext("Resource", side=4, line=3, cex=0.75)#
}
between years plot#
dev.new(width=7, height=5)#
plot(Bfin[,1]~c(1:nyrs), ylim=c(min(Bfin), max(Bfin)),#
    xlab="year", ylab="Abundance", type="n")#
for (i in 1:nsp) {#
  lines(Bfin[,i]~c(1:nyrs), col=colerz[i], lty=lspbyrs, lwd=lwd)#
}#
#
dev.new(width=7, height=5)#
range=c(1:(tsteps/3))#
plot(R[1,range]~range, ylim=c(min(R), max(R)),#
     xlab="step, step, step", ylab="Resource", type="n")#
for (i in 2:nyrs) {#
  lines(R[i,range]~range, col=colerz[i], lty=lspbyrs, lwd=lwd)#
}
Started 10 July 2011 ####
### By Lizzie & Megan ####
#
## VarEnvironments & Coexistence ###
#
# safety feature(s)#
options(stringsAsFactors=FALSE)#
#
# packages#
library(ggplot2)#
#
#set.seed(2)#
#
# define all parameters#
nsp <- 30    # number of spp#
nyrs1 <- 100  # number of yrs to run first stationary period#
ndays <- 1  # number of days in a growing season#
dt <- 0.001 # within yr timestep#
tsteps <- ndays/dt#
# params for adding on a nonstationary run after stationary run#
nyrs2 <- 50 # number of yrs for second run (nonstationary for now)#
nyrs <- nyrs1+nyrs2 # ALERT! change below once not doing stationary+nonstationary run#
y <- c(1:nyrs)#
#
## Extinction Threshold:  1 seed per hectare (assuming that initial density is 10 seeds per meter)#
ext <- 1/10000#
#
# set up graphics parameters#
colerz <- topo.colors(nsp)#
rcol <- "darkslateblue"#
linez <- rep(1:6, 100) # enough for 600 species for now#
lspbyrs <- 1#
lresbyrs <- 2#
lwd=2#
#
## Setting up loop for multiple model runs#
# To do still:#
# (1) add in everything crossyrsvars need (was lazy about this)#
# (2) add in resource stuff to withinyrs#
# (3) decide on list for each run, versus some other format#
#
modelruns <- list() # place to store output of runs#
nruns <- 2 # number of model runs to do#
for (j in c(1:nruns)){ # assuming, we will vary species characteristics between yrs ... #
###
## species characteristics#
###
b <-  rep(1,nsp)          # biomass of seedling#
s <-  rep(0.8,nsp)      # seedbank survival overwinter#
a <-  rep(20,nsp)        # slope of species uptake rate with increasing R#
u <-  rep(1,nsp)          # inverse of the max uptake rate#
c <-  rep(12,nsp)        # conversion of resource to biomass#
m <-  rep(0.05,nsp)     # mortality#
gmax <-  rep(0.5,nsp)     # max germination fraction#
h <-  rep(100,nsp)             # max rate of germination decrease following pulse#
phi <- rep(0.05,nsp)     # conversion of end-of-season plant biomass to seeds#
tauI <- runif(nsp,0.1, 0.9)    # time of max germ for sp i#
# set up tracking (to do for Lizzie, there should be code under here someday)#
theta <- rep(1,nsp)         # shape of species i uptake curve, remember it should be an integer!#
N0 <- rep(10,nsp)          # initial number of seeds (per meter square?)#
Rstar <- (m/(a*(c-m*u)))^(1/theta)#
#
crossyrsvars <- as.data.frame(cbind(b, s, a, u, c, m, gmax, h, phi, theta, tauI, Rstar))#
#
###
## time-varying env variables#
###
mu <- log(2)  #mean of resource distribution#
sigma <- 0.2  #sd of resource distribution#
R0 <- rlnorm(nyrs, mu, sigma) # intial R in a season#
eps <- 1              # evaporative stress#
#tauP <- 0.3           # timing of pulse#
p <- 2  #first parameter for beta distribution of tau#
q <- 2  #second parameter for beta distribution of tau#
tauPs <- rbeta(nyrs1, p, q) # change once not doing stationary+nonstationary run#
#
# nonstationary tauP, change once not doing stationary+nonstationary run#
qns <- seq(2, 20, length.out=nyrs2)#
tauPns <- rbeta(nyrs2, p, qns) # yes, it takes a vector! Yay!#
plot(tauPns~c(1:50))#
tauP <- c(tauPs, tauPns)#
#
###
## Within-growing season dynamics set-up#
###
R <- matrix(rep(0), nyrs, ndays/dt) # R is the resource level through the growing season (each yr)#
B <- array(rep(0), dim=c(nyrs,nsp,tsteps)) # where B is an array with yr (nyrs), spp biomass#
    # through growing season (ndays)#
N <- matrix(rep(0), nyrs, nsp) # number of seeds by yr and spp#
N[1,] <- N0  #initialize#
Bfin <- matrix(rep(0),nyrs,nsp) # biomass at end of year y#
#
###
## set-up for different coexistence mechanisms#
###
tauIstar <- matrix(rep(0),nyrs,nsp)#
Bnocomp <- matrix(rep(0),nyrs,nsp) # B without competition at end of year y#
E <- matrix(rep(0),nyrs,nsp)#
C <- matrix(rep(0),nyrs,nsp)#
#
###
## change to mapply someday?#
## for now, a loop#
## Better to use ODE solver within each year?#
###
#
for (y in c(1:(nyrs-1))){#
  g <- gmax*exp(-h*(tauP[y]-tauI)^2)  #germination fraction in year y#
  k<-1#
  R[y,k] <- R0[y]#
  B[y,,k] <- b*g*N[y,]#
  while (R[y,k]>min(Rstar)){#
      f <- (a*R[y,k]^theta)/(1+a*u*R[y,k]^theta)#
      B[y,,k+1] <- B[y,,k]+(c*f-m)*B[y,,k]*dt#
      R[y,k+1] <- R[y, k] -dt*(t(B[y,,k]) %*% f + eps*R[y,k])#
      R[y,k+1] <- R[y,k+1]*(R[y,k+1]>0)#
      k <- k+1#
    }#
  Bfin[y,] <- apply(B[y,,], 1, max)  #final biomass#
  # add some internal calculations to make other calculations easier#
  tauIstar[y,] <- (log(R0[y])/eps)-(1/(theta*eps))*log(m/(a*c-a*u*m))#
  Bnocomp[y,] <- B[y,,1]*((1+a*u*R0[y]^theta)/(1+a*u*R0[y]^theta*exp(-eps*tauIstar[y,]*theta)))*#
      exp((-c/(u*eps*theta))-m*tauIstar[y,])#
  # E[y,] <- log(s*g*(phi*Bnocomp[y,]-1))#
  # C[y,] <- log((phi*Bnocomp[y,]-1)/(phi*Bfin[y,]-1))#
  N[y+1,] <- s*(N[y,]*(1-g)+phi*Bfin[y,])  #convert biomass to seeds and overwinter#
  N[y+1,] <- N[y+1,]*(N[y+1,]>ext)  #if density does not exceed ext, set to zero#
}#
modelruns[[j]] <- list(crossyrsvars, Bfin, E)#
# could also make each run a multi-part dataframe with common names#
# so something like:#
# modelruns[[paste("crossyrs", j, sep="")]] <- crossyrsvars#
# modelruns[[paste("withinyrs", j, sep="")]] <- Bfin#
}#
# between years plot#
dev.new(width=7, height=5)#
plot(Bfin[,1]~c(1:nyrs), ylim=c(min(Bfin), max(Bfin)),#
    xlab="year", ylab="Abundance", type="n")#
for (i in 1:nsp) {#
  lines(Bfin[,i]~c(1:nyrs), col=colerz[i], lty=lspbyrs, lwd=lwd)#
}#
#
dev.new(width=7, height=5)#
range=c(1:(tsteps/3))#
plot(R[1,range]~range, ylim=c(min(R), max(R)),#
     xlab="step, step, step", ylab="Resource", type="n")#
for (i in 2:nyrs) {#
  lines(R[i,range]~range, col=colerz[i], lty=lspbyrs, lwd=lwd)#
}#
# within years plots#
# tweaked a little to make biomass differences among years clearer#
dev.new(width=7, height=5)#
par(mfrow=c(3,3))#
par(mar=c(5, 4, 4, 8) + 0.1)#
selectyrs <- seq(1, nyrs, by=floor(nyrs/8))#
yrlength <- ndays/dt#
for (yr in seq_along(selectyrs)){#
    allsp <- B[selectyrs[yr], ,]#
    plot(B[selectyrs[yr], 1,]~c(1:yrlength), ylim=c(min(allsp), max(B)), #
        xlab="step, step, step",  ylab="Abundance", type="n",#
        main=paste("year: ", selectyrs[yr], sep=""))#
    for (sp in c(1:nsp)){#
        lines(B[selectyrs[yr], sp ,]~c(1:yrlength), ylim=c(min(allsp), max(B)),#
            col=colerz[sp])#
    }#
    par(new=TRUE)#
    plot(R[selectyrs[yr],]~c(1:yrlength), axes=FALSE, xlab="", ylab="",#
        ylim=c(min(R[selectyrs[yr],]), max(R[selectyrs[yr],])), type="l",#
        col=rcol, lty=lresbyrs, lwd=lwd)#
    raxis <- seq(0, max(R[selectyrs[yr],]), by=max(R[selectyrs[yr],])/10)#
    axis(4, at=raxis, labels=round(raxis, digits=2))#
    mtext("Resource", side=4, line=3, cex=0.75)#
}#
# two options for overlay histograms#
par(mfrow=c(1,1))#
#
dev.new(width=5, height=6)#
# (1) using the base package (I hate this, let's rm it)#
maxhist <- max(tauI, tauP)*1.1#
tauIfin <- tauI[which(Bfin[max(y),]>0)]#
tauIlosers <- tauI[which(Bfin[max(y),]<=0)]#
hist(tauIfin, col=rgb(1, 0, 0, 0.5), xlim=c(0, maxhist), ylim=c(0, nsp),#
    main=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "), xlab="taus")#
hist(tauP, col=rgb(0, 0, 1, 0.5), add=TRUE)#
hist(tauIlosers, col=rgb(0, 0, 1, 0.5), add=TRUE)#
#
dev.new(width=7, height=6)#
# (2) using ggplot, which really is good for this sort of thing#
tau.df <- data.frame(coexisted=Bfin[max(y),]>0, tauI=tauI)#
tau.df$coexisted[tau.df$coexisted==TRUE] <- "coexisted"#
tau.df$coexisted[tau.df$coexisted==FALSE] <- "doomed"#
tauP.df <- data.frame(coexisted=rep("tauP"), tauP=tauP)#
#
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))#
## notes for lizzie (by lizzie):#
# length of vectors is nsp#
# while loop runs through season until minimum R* is met#
# while loop runs until SECOND species is below its R*#
# but we should run it so at R* each species converts to seeds (maybe?)#
# for now we convert max biomass to seeds#
#
# y is years#
# t is within years#
#
# %% is mod (integer division: it's the remainder once a even division)#
#
print(c("The number of coexisting species are",sum(Bfin[max(y),]>0),"out of",nsp))
within years plots#
# tweaked a little to make biomass differences among years clearer#
dev.new(width=14, height=10)#
par(mfrow=c(3,3))#
par(mar=c(5, 4, 4, 8) + 0.1)#
selectyrs <- seq(1, nyrs, by=floor(nyrs/8))#
yrlength <- ndays/dt#
for (yr in seq_along(selectyrs)){#
    allsp <- B[selectyrs[yr], ,]#
    plot(B[selectyrs[yr], 1,]~c(1:yrlength), ylim=c(min(allsp), max(B)), #
        xlab="step, step, step",  ylab="Abundance", type="n",#
        main=paste("year: ", selectyrs[yr], sep=""))#
    for (sp in c(1:nsp)){#
        lines(B[selectyrs[yr], sp ,]~c(1:yrlength), ylim=c(min(allsp), max(B)),#
            col=colerz[sp])#
    }#
    par(new=TRUE)#
    plot(R[selectyrs[yr],]~c(1:yrlength), axes=FALSE, xlab="", ylab="",#
        ylim=c(min(R[selectyrs[yr],]), max(R[selectyrs[yr],])), type="l",#
        col=rcol, lty=lresbyrs, lwd=lwd)#
    raxis <- seq(0, max(R[selectyrs[yr],]), by=max(R[selectyrs[yr],])/10)#
    axis(4, at=raxis, labels=round(raxis, digits=2))#
    mtext("Resource", side=4, line=3, cex=0.75)#
}
?rbeta
stdeffect1 <- function(data, responsecol, treatcon){#
sensexpt <- data.frame(cbind(studyid=character(0), respchange=numeric(0),#
     sppintxnmetric=character(0), heatlevel=numeric(0)))#
for (boop in seq_along(unique(data$studyid))){#
    subby <- subset(data, studyid==unique(data$studyid)[boop])#
    subby$sppintxnmetric <- paste(subby$latbi, subby$latbi2,#
        subby$phenophase, subby$fitnesscomp)#
    control <- subset(subby, treatment==treatcon)#
    heat1 <- subset(subby, treatment>treatcon)#
    spp <- control[!duplicated(control$sppintxnmetric),]#
      for (speciesy in 1:nrow(spp)){#
             controlsp <- subset(control, sppintxnmetric==#
                 spp$sppintxnmetric[speciesy])#
             heatsp <- subset(heat1, sppintxnmetric=#
                 =spp$sppintxnmetric[speciesy])#
             for (treater in 1:length(unique(heat1$treatment))){#
                 heatadd <- subset(heatsp, treatment==#
                    unique(heat1$treatment)[treater])#
                 sensadd <- data.frame(cbind(studyid=unique(data$studyid)[boop], #
                     respchange=(heatadd[[responsecol]][1]-#
                     controlsp[[responsecol]][1]), sppintxnmetric=#
                     spp$sppintxnmetric[speciesy], heatlevel=#
                     unique(heat1$treatment)[treater]))#
             sensexpt <- rbind(sensexpt, sensadd)#
               }#
        }#
  }#
return(sensexpt)#
}
stdeffect1 <- function(data, responsecol, treatcon){#
sensexpt <- data.frame(cbind(studyid=character(0), respchange=numeric(0),#
     sppintxnmetric=character(0), heatlevel=numeric(0)))#
for (boop in seq_along(unique(data$studyid))){#
    subby <- subset(data, studyid==unique(data$studyid)[boop])#
    subby$sppintxnmetric <- paste(subby$latbi, subby$latbi2,#
        subby$phenophase, subby$fitnesscomp)#
    control <- subset(subby, treatment==treatcon)#
    heat1 <- subset(subby, treatment>treatcon)#
    spp <- control[!duplicated(control$sppintxnmetric),]#
      for (speciesy in 1:nrow(spp)){#
             controlsp <- subset(control, sppintxnmetric=#
                 spp$sppintxnmetric[speciesy])#
             heatsp <- subset(heat1, sppintxnmetric=#
                 =spp$sppintxnmetric[speciesy])#
             for (treater in 1:length(unique(heat1$treatment))){#
                 heatadd <- subset(heatsp, treatment==#
                    unique(heat1$treatment)[treater])#
                 sensadd <- data.frame(cbind(studyid=unique(data$studyid)[boop], #
                     respchange=(heatadd[[responsecol]][1]-#
                     controlsp[[responsecol]][1]), sppintxnmetric=#
                     spp$sppintxnmetric[speciesy], heatlevel=#
                     unique(heat1$treatment)[treater]))#
             sensexpt <- rbind(sensexpt, sensadd)#
               }#
        }#
  }#
return(sensexpt)#
}
stdeffect1 <- function(data, responsecol, treatcon){#
sensexpt <- data.frame(cbind(studyid=character(0), respchange=numeric(0),#
     sppintxnmetric=character(0), heatlevel=numeric(0)))#
for (boop in seq_along(unique(data$studyid))){#
    subby <- subset(data, studyid==unique(data$studyid)[boop])#
    subby$sppintxnmetric <- paste(subby$latbi, subby$latbi2,#
        subby$phenophase, subby$fitnesscomp)#
    control <- subset(subby, treatment==treatcon)#
    heat1 <- subset(subby, treatment>treatcon)#
    spp <- control[!duplicated(control$sppintxnmetric),]#
      for (speciesy in 1:nrow(spp)){#
             controlsp <- subset(control, sppintxnmetric==#
                 spp$sppintxnmetric[speciesy])#
             heatsp <- subset(heat1, sppintxnmetric==#
                 spp$sppintxnmetric[speciesy])#
             for (treater in 1:length(unique(heat1$treatment))){#
                 heatadd <- subset(heatsp, treatment==#
                    unique(heat1$treatment)[treater])#
                 sensadd <- data.frame(cbind(studyid=unique(data$studyid)[boop], #
                     respchange=(heatadd[[responsecol]][1]-#
                     controlsp[[responsecol]][1]), sppintxnmetric=#
                     spp$sppintxnmetric[speciesy], heatlevel=#
                     unique(heat1$treatment)[treater]))#
             sensexpt <- rbind(sensexpt, sensadd)#
               }#
        }#
  }#
return(sensexpt)#
}
pdq <- read.csv("~/Documents/Subversion/phenology/Data/pheno_raw.csv", header=TRUE)
ham <- subset(pdq, genus=="Hamamelis")
ham
write.csv(ham, "/Users/Lizzie/Desktop/hamamelis.csv", row.names=FALSE)
Started 16 July 2013 ###
## By Lizzie ###
## Taken mostly from timinhgmeta_analysis.R, plus chao breakpoints ###
#
## Updated 30 July 2013 to try new breakpoint method ###
## Last updated 4 Febraury 2014 to change the figure so I could use part of it for Packard fellowship ###
#
options(stringsAsFactors=FALSE)#
#
# library(RColorBrewer)#
library(segmented)#
library(zoo)#
#
sens.m <- read.csv("~/Documents/R/NCEAS/Phenology/WorkingGroup/Experiments/Meta/outputdata/obs.csv", header=TRUE)#
# sens.m is main sensitivity#
names(sens.m)[names(sens.m)=="sens.m"] <- "sens"#
sens.m.sm <- subset(sens.m, select=c("genus", "species", "p.val", "sens", "phase",#
     "meaneventdate", "site", "phentype"))#
#
# climate data#
climat <- read.csv("~/Documents/R/NCEAS/Phenology/WorkingGroup/Experiments/Meta/outputdata/siteinfo/climat.csv", header=TRUE)#
climat.mat <- subset(climat, select=c("site", "MinTemp", "MeanTemp"))#
#
sens.m.smclim <- merge(sens.m.sm, climat.mat, by="site")#
#
# subset as done in manuscript#
sens.m.nl <- subset(sens.m.smclim, site!="bertel" & site!="luquillo" & site !="sevcore")#
sens.m.nlout <- subset(sens.m.nl, abs(sens)<40)#
#
# sort sites by MAT#
sens.m.nlout <- sens.m.nlout[with(sens.m.nlout, order(-MeanTemp)),]#
#
###
## Do some breakpoint work#
###
#
# do for washdc, konza, concord, fargo, chinnor and gothic#
# other sites have less than 100 species#
#
# method 1: use segmented package (see method 2, way below)#
conc <- subset(sens.m.nlout, site=="concord")#
modlin <- lm(sens~meaneventdate, data=conc)#
modseg <- segmented(modlin, seg.Z = ~meaneventdate, psi=149, data=conc)#
summary(modseg) # for stats#
#
# concord is 128, fitter is 50, dc is 106, konza is 70, and gothic is 157#
#
pepclimsites <- subset(sens.m.nlout, phentype=="flo")#
pepclimsites <- subset(pepclimsites, site=="fitter"|site=="washdc"|site=="harvard"|site=="mohonk")#
pepclimsites <- subset(pepclimsites, p.val<0.1)#
modlin <- lm(sens~meaneventdate, data=pepclimsites)#
modseg <- segmented(modlin, seg.Z = ~meaneventdate, psi=149, data=pepclimsites)#
# plot(modseg, add=TRUE)#
# with all data: including concord it's 106.9 (vs. 111.1)#
# excluding all >0.1 pvalue: with concord it's 115.3; without it's 120.2#
# parameters#
f<-1#
x<-c(1.2, 2.2)#
x1<-c(0.9, 1.9)#
xtxt <- c(1,2)#
#
daterr <-subset(sens.m.nlout, phentype=="flo")#
#
leg.cex <- 0.5#
legend.x1 <- 20#
legend.y1 <- 33#
legend.x <- 260#
legend.y <- -11 # all data: 63#
#
obs <- daterr#
obssitenames <- unique(obs[["site"]])#
#
colobs <- c("thistle3", "thistle4", "pink4", "plum3", "plum4", #
      "skyblue3", "skyblue4", "dodgerblue1", "dodgerblue2", "dodgerblue3", "dodgerblue4",#
       "darkslateblue", "navy")#
pchobs <- c(rep(1:11,2))#
pchobs[9] <- 1#
#
###
## all on one figure#
#
par(mfrow=c(1,1))#
quartz("Quartz", width=8, height=5, pointsize=12)#
plot(daterr$sens~daterr$meaneventdate, type="n",#
    ylab="sensitivity", xlab="mean event date")#
for(i in c(1:length(obssitenames))){#
   dater <- subset(obs, site==obssitenames[i])#
   points(dater$sens~dater$meaneventdate, col=colobs[i], pch=pchobs[i])#
 }#
plot(modseg, add=TRUE)#
# abline(v=149, col="dodgerblue4") # from the Ecosystems ms.#
# abline(v=153.1, col="dodgerblue4")#
#
legend(legend.x, legend.y, rev(obssitenames), pch=rev(pchobs),#
    col=rev(colobs), cex=leg.cex, bty="n")#
###
## two figures#
#
colobs <- c("thistle3", "pink4", "plum4", #
      "skyblue3", "skyblue4", "dodgerblue1", "dodgerblue2", "dodgerblue3", "dodgerblue4",#
       "darkslateblue", "navy")#
pchobs <- c(rep(1:11,2))#
pchobs[9] <- 1#
#
ylim<-c(-40, 30)#
#
nonpepsites <- subset(sens.m.nlout, phentype=="flo")#
nonpepsites <- subset(nonpepsites, site!="fitter" & site!="washdc" & site!="harvard"#
    & site!="mohonk" & site!="concord") # also excluding concord because not in Ben's Ecosystems paper#
#
allbutconc <- rbind(nonpepsites, pepclimsites)#
allbutconc <- allbutconc[with(allbutconc, order(-MeanTemp)),]#
#
obssitenameshere <- unique(allbutconc[["site"]])#
colourz <- as.data.frame(cbind(site=obssitenameshere,#
    col=colobs[1:length(obssitenameshere)], pch=rev(pchobs[1:length(obssitenameshere)])))#
colourz$pch <- as.numeric(colourz$pch)
obssitenameshere
pepclimsites
unique(pepclimsites$site)
obssitenameshere
quartz("Quartz", width=6, height=10, pointsize=12)#
par(mfrow=c(2,1))#
plot(pepclimsites$sens~pepclimsites$meaneventdate, type="n",#
    ylab="sensitivity", xlab="mean event date", ylim=ylim)#
for(i in c(1:length(unique(pepclimsites$site)))){#
   dater <- subset(pepclimsites, site==unique(pepclimsites$site)[i])#
   colourhere <- subset(colourz, site==unique(pepclimsites$site)[i])#
   points(dater$sens~dater$meaneventdate, col=colourhere$col,#
      pch=colourhere$pch, ylim=ylim)#
 }#
plot(modseg, add=TRUE)#
#
legend(legend.x, legend.y, unique(pepclimsites$site), pch=rev(colourz$pch),#
    col=rev(colourz$col), cex=leg.cex, bty="n")
quartz("Quartz", width=6, height=4, pointsize=12)#
par(mfrow=c(1,1))#
plot(pepclimsites$sens~pepclimsites$meaneventdate, type="n",#
    ylab="sensitivity", xlab="mean event date", ylim=ylim)#
for(i in c(1:length(unique(pepclimsites$site)))){#
   dater <- subset(pepclimsites, site==unique(pepclimsites$site)[i])#
   colourhere <- subset(colourz, site==unique(pepclimsites$site)[i])#
   points(dater$sens~dater$meaneventdate, col=colourhere$col,#
      pch=colourhere$pch, ylim=ylim)#
 }#
plot(modseg, add=TRUE)#
#
legend(legend.x, legend.y, unique(pepclimsites$site), pch=rev(colourz$pch),#
    col=rev(colourz$col), cex=leg.cex, bty="n")
for Packard (just one plot with pared down legend)#
#
colobs <- c("thistle3",  "plum4", "dodgerblue2", "darkslateblue")#
pchobs <- c(rep(1:11,2))#
pchobs[9] <- 1#
#
quartz("Quartz", width=6, height=4, pointsize=12)#
par(mfrow=c(1,1))#
plot(pepclimsites$sens~pepclimsites$meaneventdate, type="n",#
    ylab="sensitivity", xlab="mean event date", ylim=ylim)#
for(i in c(1:length(unique(pepclimsites$site)))){#
   dater <- subset(pepclimsites, site==unique(pepclimsites$site)[i])#
   colourhere <- subset(colourz, site==unique(pepclimsites$site)[i])#
   points(dater$sens~dater$meaneventdate, col=colourhere$col,#
      pch=colourhere$pch, ylim=ylim)#
 }#
plot(modseg, add=TRUE)#
#
legend(220, legend.y, unique(pepclimsites$site), pch=rev(colourz$pch),#
    col=rev(colourz$col), cex=leg.cex, bty="n")
colobs <- c("thistle3",  "plum4", "dodgerblue2", "darkslateblue")#
pchobs <- c(rep(1:11,2))#
pchobs[9] <- 1#
#
quartz("Quartz", width=6, height=4, pointsize=12)#
par(mfrow=c(1,1))#
plot(pepclimsites$sens~pepclimsites$meaneventdate, type="n",#
    ylab="sensitivity", xlab="mean event date", ylim=ylim)#
for(i in c(1:length(unique(pepclimsites$site)))){#
   dater <- subset(pepclimsites, site==unique(pepclimsites$site)[i])#
   colourhere <- subset(colourz, site==unique(pepclimsites$site)[i])#
   points(dater$sens~dater$meaneventdate, col=colourz$col,#
      pch=colourz$pch, ylim=ylim)#
 }#
plot(modseg, add=TRUE)#
#
legend(220, legend.y, unique(pepclimsites$site), pch=rev(colourz$pch),#
    col=rev(colourz$col), cex=leg.cex, bty="n")
colobs <- c("thistle3",  "plum4", "dodgerblue2", "darkslateblue")#
pchobs <- c(rep(1:11,2))#
pchobs[9] <- 1#
#
quartz("Quartz", width=6, height=4, pointsize=12)#
par(mfrow=c(1,1))#
plot(pepclimsites$sens~pepclimsites$meaneventdate, type="n",#
    ylab="sensitivity", xlab="mean event date", ylim=ylim)#
for(i in c(1:length(unique(pepclimsites$site)))){#
   dater <- subset(pepclimsites, site==unique(pepclimsites$site)[i])#
   colourhere <- subset(colourz, site==unique(pepclimsites$site)[i])#
   points(dater$sens~dater$meaneventdate, col=colourz$col,#
      pch=colourhere$pch, ylim=ylim)#
 }#
plot(modseg, add=TRUE)#
#
legend(220, legend.y, unique(pepclimsites$site), pch=colourhere$pch[1:4],#
    col=rev(colourz$col), cex=leg.cex, bty="n")
quartz("Quartz", width=6, height=4, pointsize=12)#
par(mfrow=c(1,1))#
plot(pepclimsites$sens~pepclimsites$meaneventdate, type="n",#
    ylab="sensitivity", xlab="mean event date", ylim=ylim)#
for(i in c(1:length(unique(pepclimsites$site)))){#
   dater <- subset(pepclimsites, site==unique(pepclimsites$site)[i])#
   colourhere <- subset(colourz, site==unique(pepclimsites$site)[i])#
   points(dater$sens~dater$meaneventdate, col=colourhere$col,#
      pch=colourhere$pch, ylim=ylim)#
 }#
plot(modseg, add=TRUE)#
#
legend(220, legend.y, unique(pepclimsites$site), pch=rev(colourz$pch),#
    col=rev(colourz$col), cex=leg.cex, bty="n")
quartz("Quartz", width=6, height=4, pointsize=12)#
par(mfrow=c(1,1))#
plot(pepclimsites$sens~pepclimsites$meaneventdate, type="n",#
    ylab="sensitivity", xlab="mean event date", ylim=ylim)#
for(i in c(1:length(unique(pepclimsites$site)))){#
   dater <- subset(pepclimsites, site==unique(pepclimsites$site)[i])#
   colourhere <- subset(colourz, site==unique(pepclimsites$site)[i])#
   points(dater$sens~dater$meaneventdate, col=colourhere$col,#
      pch=colourhere$pch, ylim=ylim)#
 }#
plot(modseg, add=TRUE)#
#
legend(220, legend.y, unique(pepclimsites$site), pch=colourhere$col,#
    col=colourhere$col, cex=leg.cex, bty="n")
install.packages("dataone")
library(dataone)
cli <- D1Client()
me <- getD1Object(cli, "wolkovich.28.1")
head(me)
me <- getD1Object(cli, "wolkovich.29.1")
me <- getD1Object(cli, "wolkovich.30.1")
head(me)
me <- getD1Object(cli, 'wolkovich.30.1')
me <- getD1Object(cli, 'doi:10.5063/AA/wolkovich.30.1')
head(me)
me <- getD1Object(cli, 'doi:10.5063/AA/wolkovich.30.1')
me <- getD1Object(cli, "wolkovich.29.1")
safety feature(s)#
options(stringsAsFactors=FALSE)#
#
# packages#
library(ggplot2)#
#
#set.seed(2)#
#
# define all parameters#
nsp <- 30    # number of spp#
nyrs1 <- 100  # number of yrs to run first stationary period#
ndays <- 1  # number of days in a growing season#
dt <- 0.001 # within yr timestep#
tsteps <- ndays/dt#
# params for adding on a nonstationary run after stationary run#
nyrs2 <- 50 # number of yrs for second run (nonstationary for now)#
nyrs <- nyrs1+nyrs2 # ALERT! change below once not doing stationary+nonstationary run#
y <- c(1:nyrs)#
#
## Extinction Threshold:  1 seed per hectare (assuming that initial density is 10 seeds per meter)#
ext <- 1/10000#
#
# set up graphics parameters#
colerz <- topo.colors(nsp)#
rcol <- "darkslateblue"#
linez <- rep(1:6, 100) # enough for 600 species for now#
lspbyrs <- 1#
lresbyrs <- 2#
lwd=2#
#
## Setting up loop for multiple model runs#
# To do still:#
# (1) add in everything crossyrsvars need (was lazy about this)#
# (2) add in resource stuff to withinyrs#
# (3) decide on list for each run, versus some other format#
#
modelruns <- list() # place to store output of runs#
nruns <- 2 # number of model runs to do#
for (j in c(1:nruns)){ # assuming, we will vary species characteristics between yrs ... #
###
## species characteristics#
###
b <-  rep(1,nsp)          # biomass of seedling#
s <-  rep(0.8,nsp)      # seedbank survival overwinter#
a <-  rep(20,nsp)        # slope of species uptake rate with increasing R#
u <-  rep(1,nsp)          # inverse of the max uptake rate#
c <-  rep(12,nsp)        # conversion of resource to biomass#
m <-  rep(0.05,nsp)     # mortality#
gmax <-  rep(0.5,nsp)     # max germination fraction#
h <-  rep(100,nsp)             # max rate of germination decrease following pulse#
phi <- rep(0.05,nsp)     # conversion of end-of-season plant biomass to seeds#
tauI <- runif(nsp,0.1, 0.9)    # time of max germ for sp i#
# set up tracking (to do for Lizzie, there should be code under here someday)#
theta <- rep(1,nsp)         # shape of species i uptake curve, remember it should be an integer!#
N0 <- rep(10,nsp)          # initial number of seeds (per meter square?)#
Rstar <- (m/(a*(c-m*u)))^(1/theta)#
#
crossyrsvars <- as.data.frame(cbind(b, s, a, u, c, m, gmax, h, phi, theta, tauI, Rstar))#
#
###
## time-varying env variables#
###
mu <- log(2)  #mean of resource distribution#
sigma <- 0.2  #sd of resource distribution#
R0 <- rlnorm(nyrs, mu, sigma) # intial R in a season#
eps <- 1              # evaporative stress#
#tauP <- 0.3           # timing of pulse#
p <- 2  #first parameter for beta distribution of tau#
q <- 2  #second parameter for beta distribution of tau#
tauPs <- rbeta(nyrs1, p, q) # change once not doing stationary+nonstationary run#
#
# nonstationary tauP, change once not doing stationary+nonstationary run#
qns <- seq(2, 20, length.out=nyrs2)#
tauPns <- rbeta(nyrs2, p, qns) # yes, it takes a vector! Yay!#
plot(tauPns~c(1:50))#
tauP <- c(tauPs, tauPns)#
#
###
## Within-growing season dynamics set-up#
###
R <- matrix(rep(0), nyrs, ndays/dt) # R is the resource level through the growing season (each yr)#
B <- array(rep(0), dim=c(nyrs,nsp,tsteps)) # where B is an array with yr (nyrs), spp biomass#
    # through growing season (ndays)#
N <- matrix(rep(0), nyrs, nsp) # number of seeds by yr and spp#
N[1,] <- N0  #initialize#
Bfin <- matrix(rep(0),nyrs,nsp) # biomass at end of year y#
#
###
## set-up for different coexistence mechanisms#
###
tauIstar <- matrix(rep(0),nyrs,nsp)#
Bnocomp <- matrix(rep(0),nyrs,nsp) # B without competition at end of year y#
E <- matrix(rep(0),nyrs,nsp)#
C <- matrix(rep(0),nyrs,nsp)#
#
###
## change to mapply someday?#
## for now, a loop#
## Better to use ODE solver within each year?#
###
#
for (y in c(1:(nyrs-1))){#
  g <- gmax*exp(-h*(tauP[y]-tauI)^2)  #germination fraction in year y#
  k<-1#
  R[y,k] <- R0[y]#
  B[y,,k] <- b*g*N[y,]#
  while (R[y,k]>min(Rstar)){#
      f <- (a*R[y,k]^theta)/(1+a*u*R[y,k]^theta)#
      B[y,,k+1] <- B[y,,k]+(c*f-m)*B[y,,k]*dt#
      R[y,k+1] <- R[y, k] -dt*(t(B[y,,k]) %*% f + eps*R[y,k])#
      R[y,k+1] <- R[y,k+1]*(R[y,k+1]>0)#
      k <- k+1#
    }#
  Bfin[y,] <- apply(B[y,,], 1, max)  #final biomass#
  # add some internal calculations to make other calculations easier#
  tauIstar[y,] <- (log(R0[y])/eps)-(1/(theta*eps))*log(m/(a*c-a*u*m))#
  Bnocomp[y,] <- B[y,,1]*((1+a*u*R0[y]^theta)/(1+a*u*R0[y]^theta*exp(-eps*tauIstar[y,]*theta)))*#
      exp((-c/(u*eps*theta))-m*tauIstar[y,])#
  # E[y,] <- log(s*g*(phi*Bnocomp[y,]-1))#
  # C[y,] <- log((phi*Bnocomp[y,]-1)/(phi*Bfin[y,]-1))#
  N[y+1,] <- s*(N[y,]*(1-g)+phi*Bfin[y,])  #convert biomass to seeds and overwinter#
  N[y+1,] <- N[y+1,]*(N[y+1,]>ext)  #if density does not exceed ext, set to zero#
}#
modelruns[[j]] <- list(crossyrsvars, Bfin, E)#
# could also make each run a multi-part dataframe with common names#
# so something like:#
# modelruns[[paste("crossyrs", j, sep="")]] <- crossyrsvars#
# modelruns[[paste("withinyrs", j, sep="")]] <- Bfin#
}#
# between years plot#
dev.new(width=7, height=5)#
plot(Bfin[,1]~c(1:nyrs), ylim=c(min(Bfin), max(Bfin)),#
    xlab="year", ylab="Abundance", type="n")#
for (i in 1:nsp) {#
  lines(Bfin[,i]~c(1:nyrs), col=colerz[i], lty=lspbyrs, lwd=lwd)#
}#
#
dev.new(width=7, height=5)#
range=c(1:(tsteps/3))#
plot(R[1,range]~range, ylim=c(min(R), max(R)),#
     xlab="step, step, step", ylab="Resource", type="n")#
for (i in 2:nyrs) {#
  lines(R[i,range]~range, col=colerz[i], lty=lspbyrs, lwd=lwd)#
}#
# within years plots#
# tweaked a little to make biomass differences among years clearer#
dev.new(width=14, height=10)#
par(mfrow=c(3,3))#
par(mar=c(5, 4, 4, 8) + 0.1)#
selectyrs <- seq(1, nyrs, by=floor(nyrs/8))#
yrlength <- ndays/dt#
for (yr in seq_along(selectyrs)){#
    allsp <- B[selectyrs[yr], ,]#
    plot(B[selectyrs[yr], 1,]~c(1:yrlength), ylim=c(min(allsp), max(B)), #
        xlab="step, step, step",  ylab="Abundance", type="n",#
        main=paste("year: ", selectyrs[yr], sep=""))#
    for (sp in c(1:nsp)){#
        lines(B[selectyrs[yr], sp ,]~c(1:yrlength), ylim=c(min(allsp), max(B)),#
            col=colerz[sp])#
    }#
    par(new=TRUE)#
    plot(R[selectyrs[yr],]~c(1:yrlength), axes=FALSE, xlab="", ylab="",#
        ylim=c(min(R[selectyrs[yr],]), max(R[selectyrs[yr],])), type="l",#
        col=rcol, lty=lresbyrs, lwd=lwd)#
    raxis <- seq(0, max(R[selectyrs[yr],]), by=max(R[selectyrs[yr],])/10)#
    axis(4, at=raxis, labels=round(raxis, digits=2))#
    mtext("Resource", side=4, line=3, cex=0.75)#
}#
# two options for overlay histograms#
par(mfrow=c(1,1))#
#
dev.new(width=5, height=6)#
# (1) using the base package (I hate this, let's rm it)#
maxhist <- max(tauI, tauP)*1.1#
tauIfin <- tauI[which(Bfin[max(y),]>0)]#
tauIlosers <- tauI[which(Bfin[max(y),]<=0)]#
hist(tauIfin, col=rgb(1, 0, 0, 0.5), xlim=c(0, maxhist), ylim=c(0, nsp),#
    main=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "), xlab="taus")#
hist(tauP, col=rgb(0, 0, 1, 0.5), add=TRUE)#
hist(tauIlosers, col=rgb(0, 0, 1, 0.5), add=TRUE)#
#
dev.new(width=7, height=6)#
# (2) using ggplot, which really is good for this sort of thing#
tau.df <- data.frame(coexisted=Bfin[max(y),]>0, tauI=tauI)#
tau.df$coexisted[tau.df$coexisted==TRUE] <- "coexisted"#
tau.df$coexisted[tau.df$coexisted==FALSE] <- "doomed"#
tauP.df <- data.frame(coexisted=rep("tauP"), tauP=tauP)#
#
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    + scale_fill_gradient(low = "red", high = "blue")#
    geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    scale_fill_gradient(low = "red", high = "blue") +#
    geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))
library(RColorBrewer)#
cols <- colorRampPalette(brewer.pal(9, "Set1"))#
ngroups <- length(unique(count_group$group))#
#
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    scale_fill_manual(values = cols(ngroups)) +#
    geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))
library(RColorBrewer)#
cols <- colorRampPalette(brewer.pal(9, "Set1"))#
ngroups <- 3#
#
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    scale_fill_manual(values = cols(ngroups)) +#
    geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))
cols <- c("dodgerblue3", "firebrick3", "skyblue")#
#
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    scale_fill_manual(values = cols(ngroups)) +#
    geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    scale_fill_manual(values = cols) +#
    geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))
cols <- c("mediumseagreen", "firebrick3", "skyblue")#
#
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    scale_fill_manual(values = cols) +#
    geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    scale_fill_manual(values = cols) +#
    geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))
cols <- c("dodgerblue3", "firebrick3", "skyblue")#
#
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    scale_fill_manual(values = cols(ngroups)) +#
    geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))
cols <- c("dodgerblue3", "firebrick3", "skyblue")#
#
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    scale_fill_manual(values = cols) +#
    geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))
cols <- c("dodgerblue4", "firebrick3", "darkslategray")#
#
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    scale_fill_manual(values = cols) +#
    geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))
cols <- c("dodgerblue4", "firebrick3", "skyblue")#
#
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    scale_fill_manual(values = cols) +#
    geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))
cols <- c("dodgerblue4", "firebrick3", "skyblue")#
#
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    scale_fill_manual(values = cols) +#
    geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))+ theme(panel.background = element_blank())
theme_set(theme_bw(24))
cols <- c("dodgerblue4", "firebrick3", "skyblue")#
#
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +#
    scale_fill_manual(values = cols) +#
    geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +#
    geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +#
    labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))
setwd("/Users/Lizzie/Documents/git/R/misc/varclim")#
#import CDR data#
cdrplants<-read.delim("input/e001_Plant aboveground biomass data.txt", header=TRUE, sep = '\t', check.name=FALSE)
setwd("/Users/Lizzie/Documents/git/R/misc/varclim")
Started 6 February 2014 ####
### By Lizzie (mostly for now), Elsa and others at ABI community dynamics meeting ####
#
## Revisting the varcomps of weather data project from Germany ##
## meeting in July 2009. ##
## Yes, really! ###
## Some of this code I straight up pulled from ##
## LTER_weatherVarGeneral.r, but a lot I made the code ##
## better than before ###
#
# basic housekeeping ##
options(stringsAsFactors=FALSE)#
print("working directory fun: change me please!")#
setwd("/Users/Lizzie/Documents/git/R/misc/varclimLTER") #
#
# libraries#
library(reshape)#
library (doBy) # for Elsa's code#
library(ggplot2)#
#
## super boring functions ###
## note: I (Lizzie) usually toss all f(x)s in source files#
# or at the top like this but you'll see below I walk through f(x)s#
# and the Cedar Creek data, I am leaving it this way for now#
# until we figure exactly what is going on ###
#
makerichnessfigures <- function(data, variablename){#
    par(mfrow=c(2, 3))#
    plot(richness~at, data=subset(data, data$variable==variablename),#
        pch=16)#
    plot(richness~et, data=subset(data, data$variable==variablename),#
        pch=16)#
    plot(richness~st, data=subset(data, data$variable==variablename),#
        pch=16)#
    plot(richness~annaverage, data=subset(data, #
        data$variable==variablename), pch=16)#
}#
#
makerichnessSTfiguresUgh <- function(data){#
    par(mfrow=c(2, 1))#
    plot1 <- ggplot(data, aes(richness, OurST, color=variable)) +#
        geom_point(shape=1) #
    plot2 <- ggplot(data, aes(year, OurST, color=variable)) +#
        geom_point(shape=1) #
    grid.arrange(plot1, plot2, ncol=2)#
}#
#
makerichnessSTfigures <- function(data){#
    # kudos to anyone who switches this to apply!#
    par(mfrow=c(2, 2))#
    for (i in seq_along(unique(data$variable))){#
    plot(richness ~ OurST, data=subset(data,#
        data$variable==unique(data$variable)[i]),#
        pch=16, main=unique(data$variable)[i])#
    }#
}#
#
makeyrSTfigures <- function(data){#
    # kudos to anyone who switches this to apply!#
    par(mfrow=c(2, 2))#
    for (i in seq_along(unique(data$variable))){#
    plot(OurST ~ year, data=subset(data,#
        data$variable==unique(data$variable)[i]),#
        pch=16, main=unique(data$variable)[i])#
    }#
}#
#
###
## Here, here, here! Starts the cleaning and calculating#
###
#
# get the data ##
# ALERT! Massively assuming that NA is a dot#
# though I could not find that for sure in the metadata#
# #
cdrclimate <- read.delim("input/e080_Dailyclimatesummary.txt", header=TRUE, sep = '\t', check.name=FALSE, na.strings="   .")#
# https://portal.lternet.edu/nis/metadataviewer?packageid=knb-lter-cdr.419.1#
#
# do any renaming to make life in the future easier#
names(cdrclimate)[names(cdrclimate)=="MaxTemp(degF)"] <- "maxtemp"#
names(cdrclimate)[names(cdrclimate)=="MinTemp(degF) "] <- "mintemp"#
names(cdrclimate)[names(cdrclimate)=="Precip(inches)"] <- "precip"#
#
# deal with dates#
# I know already we'll want month and year so grab those#
cdrclimate$date <- as.Date(cdrclimate$Date, format="%m/%d/%Y")#
cdrclimate$month <- format(cdrclimate$date, "%m")#
cdrclimate$year <- format(cdrclimate$date, "%Y")#
cdrclimate$doy <- format(cdrclimate$date, "%j")#
#
# get the mean#
cdrclimate$meantemp <- (cdrclimate$mintemp+cdrclimate$maxtemp)/2#
#
# Set the growing season for the LTER site ##
gstart <- 4 # This month onward will be included#
gend <- 10  # This is the first month at the end of the season that will *not* be included#
#
# Take a look at the time series ##
# requires a dataframe with the column names:#
# date, mintemp, maxtemp, precip#
lookatdata <- function(data){#
    par(mfrow=c(2,2))#
    plot(maxtemp~date, data=data, pch=16)#
    plot(mintemp~date, data=data, pch=16)#
    plot(meantemp~date, data=data, pch=16)#
    plot(precip~date, data=data, pch=16)#
}#
#
# example!#
lookatdata(cdrclimate)#
#
# aggregate by month ##
# again, give it data with meantemp, maxtemp, mintemp, precip and year#
# with those exact colnames#
takemeanbymonth <- function(data){#
    dater <- aggregate(cbind(data[["meantemp"]], data[["mintemp"]],#
        data[["maxtemp"]], data[["precip"]]), by=list(year=data[["year"]],#
        month=data[["month"]]), mean, na.rm=TRUE)#
    names(dater)[names(dater)=="V1"] <- "monthlymean"#
    names(dater)[names(dater)=="V2"] <- "monthlymin"#
    names(dater)[names(dater)=="V3"] <- "monthlymax"#
    names(dater)[names(dater)=="V4"] <- "monthlyprecip"#
    return(dater)#
  }#
# simple function to throw out climate data outside of the growing season#
# give the f(x) data -- with a "month" col., and months in numeric formats#
growingseasonize <- function(data, gstart, gend){#
    data[["month"]] <- as.numeric(data[["month"]])#
    dater <- subset(data, month>gstart & month<gend)#
    return(dater)#
  }#
#
# examples!#
cdrmeans <- takemeanbymonth(cdrclimate)#
cdrmeanseas <- growingseasonize(cdrmeans, 4, 10)#
#
## start the variability code (stolen from Jon Shurin) ###
# first, take the overall average across ALL years for each predictor variable for each LTER site (er, for now just CDR) ##
#
# below could be rewritten quicker with reshape#
# but it is 17:00 and no one has given me a beer (sadface)#
makeallaverage <- function(data){#
    goo <- melt(data, id=c("year","month"), all=TRUE)#
    allaverage <- aggregate(goo$value, list(variable=goo$variable),#
        mean, na.rm=TRUE)#
    return(allaverage)#
  }#
#
getannualandinterannual <- function(data){#
    goo <- melt(data, id=c("year","month"), all=TRUE)#
    allaverage <- aggregate(goo$value, list(variable=goo$variable),#
        mean, na.rm=TRUE)#
    annaverage <- aggregate(goo$value, list(variable=goo$variable,#
        year=goo$year), mean, na.rm=TRUE) # get the inter-annual variance#
    names(allaverage)[2]<-"allaverage" #
    names(annaverage)[3]<-"annaverage"#
    alldata<-merge(annaverage, allaverage, by=c("variable"))#
    alldata<-merge(goo, alldata, by=c("variable", "year"))#
    # puts annual and overall means together with monthly observations#
    # Calculating variance components a la Jon Shurin ##
    alldata$at<-alldata$annaverage/alldata$allaverage#
    #at, annual deviation from long-term mean#
    alldata$st<-alldata$value/alldata$annaverage#
    #st, seasonal deviation from annual mean#
    allAt=aggregate(alldata$at, list(variable=alldata$variable,#
    year=alldata$year), mean, na.rm=TRUE)#
    allSt=aggregate(alldata$st, list(variable=alldata$variable,#
        month=alldata$month), mean, na.rm=TRUE)#
    names(allAt)[3]<-"at"; names(allSt)[3]<-"avgSt";#
    alldata<-merge(alldata, allSt, by=c("variable", "month"))#
    alldata$et<-alldata$st/alldata$avgSt#
    return(alldata)#
  }#
#
cdrdevfrommeans <- getannualandinterannual(cdrmeanseas)#
cdrallaverage <- makeallaverage(cdrmeanseas)#
#
# data must be run through getannualandinterannual f(x)#
# we should someday figure out what this did#
# and also double check all my code!!!#
# next up, something related to standard deviations#
getSDetcstuff <- function(alldata, allaverage, nameme){#
    alldata$seast <- abs(alldata$value-alldata$annaverage)   #
    tseas <- tapply(alldata$seast, list(alldata$variable),#
        mean, na.rm=TRUE)#
    newtseas <- data.frame(cbind(variable=c("monthlymean", "monthlyprecip",#
        "monthlymax", "monthlymin"), SeasMeanAllYears=unname(tseas)))#
    allSeas <- aggregate(alldata$seast, list(variable=alldata$variable,#
        year=alldata$year), mean, na.rm=TRUE)#
    seasagain <- merge(newtseas, allSeas, by=c("variable"))#
    names(seasagain)[4]<-"YearSeasDiff"#
    seasagain$OurST <- as.numeric(seasagain$SeasMeanAllYears)/#
       as.numeric(seasagain$YearSeasDiff)#
    SdAt<-aggregate(alldata$at, list(variable=alldata$variable),#
        sd, na.rm=TRUE) # Sd of annual variability, the annual component#
    names(SdAt)[2]<-"SdAt"#
    SdSt<-aggregate(alldata$avgSt, list(variable=alldata$variable), sd,#
        na.rm=TRUE) # Sd of seasonal variability#
    names(SdSt)[2]<-"SdSt"#
    SdEt<-aggregate(alldata$et, list(variable=alldata$variable), sd,#
        na.rm=TRUE) # Sd of events#
    names(SdEt)[2]<-"SdEt"#
# Above is the last bit of changes to AllData, so I am below adding the new terrestrial seasonal thing here ##
    seasagainsm <- subset(seasagain, select =#
        c("variable", "year", "OurST"))#
    alldata <- merge(alldata, seasagain,#
        by=c("variable", "year"), all.x=TRUE, all.y = TRUE)#
# Back to Jon's codes, merging up the variance components to get wee file per LTER site -- this is really only useful for comparison across sites ##
    VarComps<-merge(SdAt, SdSt, by=c("variable"))#
    VarComps<-merge(VarComps, SdEt, by=c("variable"))#
    VarComps<-merge(VarComps, allaverage, by=c("variable"))#
    names(VarComps)[2:5] <- c("annual","seasonal","events", "allaverage")#
    VarComps$site <- nameme#
    outputlist <- list(alldata=alldata, varcomps=VarComps,#
        season=seasagainsm)#
    return(outputlist)#
}#
#
cdrbig <- getSDetcstuff(cdrdevfrommeans, cdrallaverage, "CDR")#
#
###
## calculate species richness & evenness at the plot level#
## taken from cdr_commdyn.R., which is by Elsa#
###
#
# import CDR data (ask Elsa for it, good workflow, I know!)#
cdrplants<-read.delim("input/e001_Plantabovegroundbiomassdata.txt", header=TRUE, sep = '\t', check.name=FALSE)#
#
#just keep the control plots#
cdrplants2 = subset(cdrplants, cdrplants$NTrt == 9)#
#
#look at my column names#
names(cdrplants)#
#
# take out some columns we don't need#
cdrplants2$NTrt = NULL#
cdrplants2$NAdd = NULL#
cdrplants2$NitrAdd = NULL#
cdrplants2 <- cdrplants2[c(-5)]#
#
# calculate species richness & evenness at the plot level#
cdrrich <- summaryBy(Biomass ~ Exp + Year + Field  + Plot, data=cdrplants2, FUN=c(length, sum))#
#
###
## now back to Lizzie!#
###
#
# aggregate richness to annual, skipping over everything#
aggregatetoyr <- function(data, yearcol, richcol){#
    richbyyr <- aggregate(cbind(data[[richcol]]),#
    by=list(year=data[[yearcol]]), mean, na.rm=TRUE)#
    names(richbyyr)[names(richbyyr)=="V1"] <- "richness"#
    return(richbyyr)#
  }#
#
cdrrichyrs <- aggregatetoyr(cdrrich, "Year", "Biomass.length")#
#
# merge the climate output and this richness#
cdr <- merge(cdrbig[["alldata"]], cdrrichyrs, by=c("year"))#
cdrOurST <- merge(cdrbig[["season"]], cdrrichyrs, by=c("year"))#
#
# make figures #
makerichnessfigures(cdr,  "monthlymax")#
makerichnessfigures(cdr, "monthlyprecip")#
makerichnessSTfigures(cdrOurST)#
makeyrSTfigures(cdrOurST)#
# bleahh#
makerichnessSTfiguresUgh(cdrOurST)
